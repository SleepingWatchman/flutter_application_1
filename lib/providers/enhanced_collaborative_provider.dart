import 'package:flutter/material.dart';
import 'dart:async';
import '../models/enhanced_collaborative_database.dart';
import '../models/collaborative_database_role.dart';
import '../services/collaborative_role_service.dart';
import '../services/enhanced_sync_service.dart';
import '../services/auth_service.dart';
import '../services/server_health_service.dart';
import '../db/database_helper.dart';
import '../utils/toast_utils.dart';
import 'database_provider.dart';
import 'package:oktoast/oktoast.dart';
import 'package:dio/dio.dart';
import 'package:flutter/rendering.dart';

class EnhancedCollaborativeProvider extends ChangeNotifier {
  final CollaborativeRoleService _roleService;
  final EnhancedSyncService _syncService;
  final AuthService _authService;
  final DatabaseHelper _dbHelper;
  final Dio _dio;
  
  DatabaseProvider? _databaseProvider;
  List<EnhancedCollaborativeDatabase> _databases = [];
  String? _currentDatabaseId;
  bool _isLoading = false;
  String? _error;
  bool _isUsingSharedDatabase = false;
  bool _isServerAvailable = false;
  
  // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
  bool _isSwitchingDatabase = false;
  bool _isSyncing = false;
  
  // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ó–∞—â–∏—Ç–∞ –æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –±–∞–∑—ã
  bool _isJustSwitchedToSharedDatabase = false;
  DateTime? _lastDatabaseSwitchTime;
  
  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
  SyncStatus _syncStatus = SyncStatus.idle;
  List<SyncConflict> _pendingConflicts = [];
  
  // –†–æ–ª–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
  Map<String, List<CollaborativeDatabaseUser>> _databaseUsers = {};
  Map<String, CollaborativeDatabaseRole?> _userRoles = {};
  Map<String, Map<String, bool>> _permissions = {};
  
  // –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
  List<Map<String, dynamic>> _pendingInvitations = [];
  
  StreamSubscription<SyncResult>? _syncResultSubscription;
  StreamSubscription<SyncStatus>? _syncStatusSubscription;

  EnhancedCollaborativeProvider(
    this._roleService,
    this._syncService,
    this._authService,
    this._dbHelper,
    this._dio,
  ) {
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Dio
    _dio.options.baseUrl = 'http://localhost:8080';
    _dio.options.connectTimeout = Duration(seconds: 5);
    _dio.options.receiveTimeout = Duration(seconds: 15);
    _dio.options.sendTimeout = Duration(seconds: 15);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    _dio.interceptors.add(InterceptorsWrapper(
      onRequest: (options, handler) async {
        final token = await _authService.getToken();
        if (token != null) {
          options.headers['Authorization'] = 'Bearer $token';
        }
        return handler.next(options);
      },
      onError: (DioException error, handler) {
        print('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É: ${error.message}');
        if (error.response?.statusCode == 401) {
          // –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
          _authService.signOut();
        }
        return handler.next(error);
      },
    ));
    
    _initializeSubscriptions();
    _initServerHealthCheck();
  }

  // –ì–µ—Ç—Ç–µ—Ä—ã
  List<EnhancedCollaborativeDatabase> get databases => _databases;
  String? get currentDatabaseId => _currentDatabaseId;
  bool get isLoading => _isLoading;
  String? get error => _error;
  bool get isUsingSharedDatabase => _isUsingSharedDatabase;
  bool get isServerAvailable => _isServerAvailable;
  SyncStatus get syncStatus => _syncStatus;
  List<SyncConflict> get pendingConflicts => _pendingConflicts;
  List<Map<String, dynamic>> get pendingInvitations => _pendingInvitations;

  void setDatabaseProvider(DatabaseProvider provider) {
    _databaseProvider = provider;
  }

  void _initializeSubscriptions() {
    _syncResultSubscription = _syncService.syncResults.listen((result) {
      _syncStatus = result.status;
      _pendingConflicts = result.conflicts;
      
      if (result.status == SyncStatus.error && result.error != null) {
        _error = result.error;
        showCustomToastWithIcon(
          '–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${result.error}',
          accentColor: Colors.red,
          fontSize: 14.0,
          icon: const Icon(Icons.error, size: 20, color: Colors.red),
        );
      } else if (result.status == SyncStatus.success) {
        showCustomToastWithIcon(
          '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ',
          accentColor: Colors.green,
          fontSize: 14.0,
          icon: const Icon(Icons.check, size: 20, color: Colors.green),
        );
        _databaseProvider?.notifyListeners();
      } else if (result.status == SyncStatus.conflict) {
        showCustomToastWithIcon(
          '–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏',
          accentColor: Colors.orange,
          fontSize: 14.0,
          icon: const Icon(Icons.warning, size: 20, color: Colors.orange),
        );
      }
      
      notifyListeners();
    });

    _syncStatusSubscription = _syncService.syncStatus.listen((status) {
      _syncStatus = status;
      notifyListeners();
    });
  }

  Future<void> _initServerHealthCheck() async {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º ServerHealthService –≤–º–µ—Å—Ç–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
    final serverHealthService = ServerHealthService();
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
    serverHealthService.addStatusListener((status) {
      final wasAvailable = _isServerAvailable;
      _isServerAvailable = status == ServerStatus.online;
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª—Å—è
      if (wasAvailable != _isServerAvailable) {
        notifyListeners();
        print('üè• HEALTH: –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω –≤ EnhancedCollaborativeProvider: ${_isServerAvailable ? "–û–Ω–ª–∞–π–Ω" : "–û—Ñ–ª–∞–π–Ω"}');
      }
    });
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    _isServerAvailable = serverHealthService.isOnline;
    
    print('üè• HEALTH: EnhancedCollaborativeProvider –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å ServerHealthService');
  }

  Future<void> loadDatabases() async {
    try {
      _isLoading = true;
      _error = null;
      notifyListeners();

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      final databases = await _loadDatabasesFromServer();
      _databases = databases;
      
      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∫–∞–∂–¥–æ–π –±–∞–∑—ã –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–µ–ª–∏
      for (int i = 0; i < _databases.length; i++) {
        final db = _databases[i];
        await _loadDatabaseUsers(db.id);
        await _loadUserRole(db.id);
        await _loadPermissions(db.id);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–µ–ª—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        final users = _databaseUsers[db.id] ?? [];
        _databases[i] = db.copyWith(users: users);
        print('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –±–∞–∑—ã ${db.name} (${db.id})');
      }
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
      await _loadPendingInvitations();
      
    } catch (e) {
      _error = e.toString();
      print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö: $e');
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }

  Future<List<EnhancedCollaborativeDatabase>> _loadDatabasesFromServer() async {
    try {
      final response = await _dio.get('/api/collaboration/databases');
      
      if (response.statusCode == 200) {
        final List<dynamic> data = response.data;
        return data.map((json) => EnhancedCollaborativeDatabase.fromJson(json)).toList();
      }
      
      throw Exception('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö: ${response.statusCode}');
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –≤ _loadDatabasesFromServer: $e');
      rethrow;
    }
  }

  Future<void> _loadDatabaseUsers(String databaseId) async {
    try {
      final users = await getDatabaseUsers(databaseId);
      _databaseUsers[databaseId] = users;
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –±–∞–∑—ã $databaseId: $e');
    }
  }

  Future<void> _loadUserRole(String databaseId) async {
    try {
      final role = await _roleService.getCurrentUserRole(databaseId);
      _userRoles[databaseId] = role;
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–æ–ª–∏ –¥–ª—è –±–∞–∑—ã $databaseId: $e');
    }
  }

  Future<void> _loadPermissions(String databaseId) async {
    try {
      final permissions = await _roleService.checkPermissions(databaseId);
      _permissions[databaseId] = permissions;
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è –±–∞–∑—ã $databaseId: $e');
    }
  }

  Future<void> _loadPendingInvitations() async {
    try {
      _pendingInvitations = await _roleService.getPendingInvitations();
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π: $e');
    }
  }

  Future<void> createDatabase(String name) async {
    try {
      _isLoading = true;
      _error = null;
      notifyListeners();

      // –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
      final newDatabase = await _createDatabaseOnServer(name);
      _databases.add(newDatabase);
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–ø–∏—é
      await _dbHelper.initializeSharedDatabase(newDatabase.id);
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –Ω–æ–≤—É—é –±–∞–∑—É
      await switchToDatabase(newDatabase.id);
      
    } catch (e) {
      _error = e.toString();
      print('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: $e');
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }

  Future<EnhancedCollaborativeDatabase> _createDatabaseOnServer(String name) async {
    try {
      final response = await _dio.post(
        '/api/collaboration/databases',
        data: {
          'name': name,
        },
      );
      
      if (response.statusCode == 200 || response.statusCode == 201) {
        return EnhancedCollaborativeDatabase.fromJson(response.data);
      }
      
      throw Exception('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${response.statusCode}');
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –≤ _createDatabaseOnServer: $e');
      rethrow;
    }
  }

  Future<void> switchToDatabase(String databaseId) async {
    // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ —Ç—É –∂–µ –±–∞–∑—É
    if (_currentDatabaseId == databaseId && _isUsingSharedDatabase) {
      print('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö $databaseId —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ');
      return;
    }
    
    // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
    if (_isSwitchingDatabase) {
      print('–û–ø–µ—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
      return;
    }
    
    try {
      _isSwitchingDatabase = true;
      _isLoading = true;
      _error = null;
      notifyListeners();

      print('–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: $databaseId');
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ background
      await _performDatabaseSwitch(databaseId);
      
      print('‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å–æ–≤–º–µ—Å—Ç–Ω—É—é –±–∞–∑—É $databaseId –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
      
      // ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ
      print('–®–ê–ì 5: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ –∑–∞–º–µ—Ç–æ–∫...');
      if (_databaseProvider != null) {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        _databaseProvider!.setNeedsUpdate(true);
        _databaseProvider!.notifyUpdate();
        print('‚úÖ –≠–∫—Ä–∞–Ω –∑–∞–º–µ—Ç–æ–∫ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
      }
      
    } catch (e) {
      _error = e.toString();
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: $e');
      
      // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      _currentDatabaseId = null;
      _isUsingSharedDatabase = false;
      _syncService.setCurrentDatabase(null);
    } finally {
      _isSwitchingDatabase = false;
      _isLoading = false;
      notifyListeners();
    }
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í—ã–Ω–æ—Å–∏–º —Ç—è–∂–µ–ª—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –±–µ–∑ notifyListeners
  Future<void> _performDatabaseSwitch(String databaseId) async {
    // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–ª–æ–∫–∏—Ä—É–µ–º –í–°–ï –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –≤–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
    if (_databaseProvider != null) {
      print('üö´ –ë–õ–û–ö–ò–†–û–í–ö–ê: –ë–ª–æ–∫–∏—Ä—É–µ–º –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –≤—Ä–µ–º—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è');
      _databaseProvider!.setIsBlocked(true);
    }
    
    try {
      // –®–ê–ì 1: –û—Ç–ø—Ä–∞–≤–∫–∞ –±—ç–∫–∞–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö (–ë–´–°–¢–†–û)
      if (_databaseProvider != null) {
        print('–®–ê–ì 1: –°–æ–∑–¥–∞–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
        try {
          final personalBackup = await _databaseProvider!.createBackup(null);
          await _databaseProvider!.savePersonalBackup(personalBackup);
          print('‚úÖ –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é');
        } catch (e) {
          print('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: $e');
          throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: $e');
        }
      }
      
      // –®–ê–ì 2: –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï - –ë–´–°–¢–†–ê–Ø –æ—á–∏—Å—Ç–∫–∞ —Ç–æ–ª—å–∫–æ –∫–µ—à–∞, –ë–ï–ó –æ—á–∏—Å—Ç–∫–∏ —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      print('–®–ê–ì 2: –û—á–∏—Å—Ç–∫–∞ —Ç–æ–ª—å–∫–æ –∫–µ—à–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
      try {
        await _dbHelper.closeDatabase();
        await _dbHelper.clearCache();
        
        // ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—á–∏—â–∞–µ–º –∫–µ—à –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π Flutter
        print('–®–ê–ì 2.1: –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π Flutter...');
        try {
          PaintingBinding.instance.imageCache.clear();
          PaintingBinding.instance.imageCache.clearLiveImages();
          print('‚úÖ –ö–µ—à –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π Flutter –æ—á–∏—â–µ–Ω');
        } catch (e) {
          print('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–µ—à–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π Flutter: $e');
        }
        
        print('‚úÖ –ö–µ—à –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω');
      } catch (e) {
        print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–µ—à–∞: $e');
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
      }
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥–∏
      _currentDatabaseId = databaseId;
      _isUsingSharedDatabase = true;
      _syncService.setCurrentDatabase(databaseId);
      
      // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞—â–∏—Ç—É –æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      _isJustSwitchedToSharedDatabase = true;
      _lastDatabaseSwitchTime = DateTime.now();
      print('üõ°Ô∏è –ó–ê–©–ò–¢–ê: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ 30 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ —Å–æ–≤–º–µ—Å—Ç–Ω—É—é –±–∞–∑—É');
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–≤–º–µ—Å—Ç–Ω—É—é –±–∞–∑—É (–ë–ï–ó UI –ë–õ–û–ö–ò–†–û–í–ö–ò)
      print('–®–ê–ì 3: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: $databaseId');
      await _dbHelper.initializeSharedDatabase(databaseId);
      
      if (_databaseProvider != null) {
        await _databaseProvider!.switchToDatabase(databaseId);
      }
         
      // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –ü–ï–†–ï–î –∏–º–ø–æ—Ä—Ç–æ–º –¥–∞–Ω–Ω—ã—Ö
      if (_databaseProvider != null) {
        print('‚úÖ –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ö–ê: –†–∞–∑—Ä–µ—à–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º');
        _databaseProvider!.setIsBlocked(false);
      }
      
      // –®–ê–ì 4: –ó–ê–ì–†–£–ó–ö–ê –¥–∞–Ω–Ω—ã—Ö —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π –±–∞–∑—ã –° —Å–µ—Ä–≤–µ—Ä–∞ (–í BACKGROUND, –ë–ï–ó –ë–õ–û–ö–ò–†–û–í–ö–ò)
      print('–®–ê–ì 4: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π –±–∞–∑—ã —Å —Å–µ—Ä–≤–µ—Ä–∞...');
      await _loadDataFromServerInBackground(databaseId);
      
    } catch (e) {
      // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      if (_databaseProvider != null) {
        print('‚ùå –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ö–ê: –†–∞–∑—Ä–µ—à–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ: $e');
        _databaseProvider!.setIsBlocked(false);
      }
      rethrow;
    }
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ UI
  Future<void> _loadDataFromServerInBackground(String databaseId) async {
    try {
      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —ç–∫—Ä–∞–Ω–∞–º–∏
      if (_databaseProvider != null) {
        _databaseProvider!.setIsBlocked(true);
        print('üö´ –ë–õ–û–ö–ò–†–û–í–ö–ê: –≠–∫—Ä–∞–Ω—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞');
      }
      
      final token = await _authService.getToken();
      if (token != null) {
        final response = await _dio.get(
          '/api/collaboration/databases/$databaseId/data',
          options: Options(
            headers: {'Authorization': 'Bearer $token'},
            validateStatus: (status) => status != null && status < 500,
            receiveTimeout: Duration(seconds: 10), // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º timeout
            sendTimeout: Duration(seconds: 10),
          ),
        );

        if (response.statusCode == 200 && response.data != null) {
          final serverData = response.data;
          print('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–∞: –∑–∞–º–µ—Ç–æ–∫ - ${serverData['notes']?.length ?? 0}, ' +
                '–ø–∞–ø–æ–∫ - ${serverData['folders']?.length ?? 0}, ' +
                '–∑–∞–ø–∏—Å–µ–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è - ${serverData['scheduleEntries']?.length ?? 0}, ' +
                '—ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–æ—Å–∫–∏ - ${serverData['pinboardNotes']?.length ?? 0}');
          
          // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∏–º–ø–æ—Ä—Ç–æ–º –ë–ï–ó –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
          await _dbHelper.importDatabaseOptimized(databaseId, serverData);
          print('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π –±–∞–∑—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–∞');
          
          // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –î–û —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
          if (_databaseProvider != null) {
            _databaseProvider!.setIsBlocked(false);
            print('‚úÖ –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ö–ê: –≠–∫—Ä–∞–Ω—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
            
            // –¢–µ–ø–µ—Ä—å –±–µ–∑–æ–ø–∞—Å–Ω–æ —É–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
            _databaseProvider!.setNeedsUpdate(true);
            _databaseProvider!.notifyUpdate();
            print('üîÑ –û–ë–ù–û–í–õ–ï–ù–ò–ï: UI –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö');
          }
        } else {
          print('‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –æ—à–∏–±–∫—É: ${response.statusCode}');
          // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
          if (_databaseProvider != null) {
            _databaseProvider!.setIsBlocked(false);
            print('üö´ –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ö–ê: –≠–∫—Ä–∞–Ω—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞');
          }
        }
      } else {
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        if (_databaseProvider != null) {
          _databaseProvider!.setIsBlocked(false);
          print('üö´ –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ö–ê: –≠–∫—Ä–∞–Ω—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã - —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        throw Exception('–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞: $e');
      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      if (_databaseProvider != null) {
        _databaseProvider!.setIsBlocked(false);
        print('üö´ –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ö–ê: –≠–∫—Ä–∞–Ω—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏: $e');
      }
      // –ù–ï –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –±–∞–∑–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π
    }
  }

  Future<void> switchToPersonalDatabase() async {
    // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –ª–∏—á–Ω—É—é –±–∞–∑—É
    if (!_isUsingSharedDatabase && _currentDatabaseId == null) {
      print('–õ–∏—á–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ');
      return;
    }
    
    // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
    if (_isSwitchingDatabase) {
      print('–û–ø–µ—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
      return;
    }
    
    try {
      _isSwitchingDatabase = true;
      _isLoading = true;
      _error = null;
      notifyListeners();
      
      print('–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ª–∏—á–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö');
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í—ã–Ω–æ—Å–∏–º —Ç—è–∂–µ–ª—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –±–µ–∑ notifyListeners
      await _performPersonalSwitch();
      
      print('‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ª–∏—á–Ω—É—é –±–∞–∑—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
      
      // ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ
      print('–®–ê–ì 3: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ –∑–∞–º–µ—Ç–æ–∫...');
      if (_databaseProvider != null) {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        _databaseProvider!.setNeedsUpdate(true);
        _databaseProvider!.notifyUpdate();
        print('‚úÖ –≠–∫—Ä–∞–Ω –∑–∞–º–µ—Ç–æ–∫ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –ª–∏—á–Ω—É—é –±–∞–∑—É');
      }
      
    } catch (e) {
      _error = e.toString();
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ –ª–∏—á–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: $e');
    } finally {
      _isSwitchingDatabase = false;
      _isLoading = false;
      notifyListeners();
    }
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í—ã–Ω–æ—Å–∏–º —Ç—è–∂–µ–ª—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –±–µ–∑ notifyListeners
  Future<void> _performPersonalSwitch() async {
    try {
      // –®–ê–ì 1: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è (–æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π –±–∞–∑—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä)
      if (_currentDatabaseId != null && _isUsingSharedDatabase) {
        print('–®–ê–ì 1: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è - –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π –±–∞–∑—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä...');
        try {
          await _syncService.forceSync();
          print('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π –±–∞–∑—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä');
        } catch (e) {
          print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: $e');
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–∞
        }
      }
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥–∏
      _syncService.setCurrentDatabase(null);
      _currentDatabaseId = null;
      _isUsingSharedDatabase = false;
      
      // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–Ω–∏–º–∞–µ–º –∑–∞—â–∏—Ç—É –æ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –ª–∏—á–Ω—É—é –±–∞–∑—É
      _isJustSwitchedToSharedDatabase = false;
      _lastDatabaseSwitchTime = null;
      print('üõ°Ô∏è –ó–ê–©–ò–¢–ê: –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–Ω—è—Ç–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –ª–∏—á–Ω—É—é –±–∞–∑—É');
      
      // –û—á–∏—â–∞–µ–º –∫–µ—à
      await _dbHelper.clearCache();
      
      // ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—á–∏—â–∞–µ–º –∫–µ—à –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π Flutter
      print('–®–ê–ì 2.1: –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π Flutter...');
      try {
        PaintingBinding.instance.imageCache.clear();
        PaintingBinding.instance.imageCache.clearLiveImages();
        print('‚úÖ –ö–µ—à –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π Flutter –æ—á–∏—â–µ–Ω');
      } catch (e) {
        print('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–µ—à–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π Flutter: $e');
      }
      
      print('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞');
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–∏—á–Ω—É—é –±–∞–∑—É
      await _dbHelper.database; // –ü–æ–ª—É—á–∞–µ–º –ª–∏—á–Ω—É—é –±–∞–∑—É
      print('–õ–∏—á–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º DatabaseProvider –æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏
      if (_databaseProvider != null) {
        await _databaseProvider!.switchToDatabase(null);
        print('DatabaseProvider –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞ –ª–∏—á–Ω—É—é –±–∞–∑—É');
      }
      
      // –®–ê–ì 2: –ó–ê–ì–†–£–ó–ö–ê –±—ç–∫–∞–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
      if (_databaseProvider != null) {
        print('–®–ê–ì 2: –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
        try {
          final personalBackup = await _databaseProvider!.getPersonalBackup();
          if (personalBackup != null) {
            await _databaseProvider!.restoreFromBackup(personalBackup, null);
            print('‚úÖ –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏');
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º UI –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –±—ç–∫–∞–ø–∞
            _databaseProvider!.setNeedsUpdate(true);
            _databaseProvider!.notifyUpdate();
          } else {
            print('‚ö†Ô∏è –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
          }
        } catch (e) {
          print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: $e');
          // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –±–∞–∑–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π
        }
      }
      
      print('‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ª–∏—á–Ω—É—é –±–∞–∑—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
      
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –≤ _performPersonalSwitch: $e');
      rethrow;
    }
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
  Future<void> inviteUser(String databaseId, String email, CollaborativeDatabaseRole role) async {
    try {
      await _roleService.inviteUser(databaseId, email, role);
      await _loadDatabaseUsers(databaseId);
      showCustomToastWithIcon(
        '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
        accentColor: Colors.green,
        fontSize: 14.0,
        icon: const Icon(Icons.check, size: 20, color: Colors.green),
      );
      notifyListeners();
    } catch (e) {
      _error = e.toString();
      showCustomToastWithIcon(
        '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: $e',
        accentColor: Colors.red,
        fontSize: 14.0,
        icon: const Icon(Icons.error, size: 20, color: Colors.red),
      );
      notifyListeners();
    }
  }

  Future<void> updateUserRole(String databaseId, String userId, CollaborativeDatabaseRole newRole) async {
    try {
      await _roleService.updateUserRole(databaseId, userId, newRole);
      await _loadDatabaseUsers(databaseId);
      showCustomToastWithIcon(
        '–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞',
        accentColor: Colors.green,
        fontSize: 14.0,
        icon: const Icon(Icons.check, size: 20, color: Colors.green),
      );
      notifyListeners();
    } catch (e) {
      _error = e.toString();
      showCustomToastWithIcon(
        '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–æ–ª–∏: $e',
        accentColor: Colors.red,
        fontSize: 14.0,
        icon: const Icon(Icons.error, size: 20, color: Colors.red),
      );
      notifyListeners();
    }
  }

  Future<void> removeUser(String databaseId, String userId) async {
    try {
      await _roleService.removeUser(databaseId, userId);
      await _loadDatabaseUsers(databaseId);
      showCustomToastWithIcon(
        '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
        accentColor: Colors.green,
        fontSize: 14.0,
        icon: const Icon(Icons.check, size: 20, color: Colors.green),
      );
      notifyListeners();
    } catch (e) {
      _error = e.toString();
      showCustomToastWithIcon(
        '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $e',
        accentColor: Colors.red,
        fontSize: 14.0,
        icon: const Icon(Icons.error, size: 20, color: Colors.red),
      );
      notifyListeners();
    }
  }

  Future<void> leaveDatabase(String databaseId) async {
    try {
      await _roleService.leaveDatabase(databaseId);
      _databases.removeWhere((db) => db.id == databaseId);
      
      if (_currentDatabaseId == databaseId) {
        await switchToPersonalDatabase();
      }
      
      showCustomToastWithIcon(
        '–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö',
        accentColor: Colors.green,
        fontSize: 14.0,
        icon: const Icon(Icons.check, size: 20, color: Colors.green),
      );
      notifyListeners();
    } catch (e) {
      _error = e.toString();
      showCustomToastWithIcon(
        '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: $e',
        accentColor: Colors.red,
        fontSize: 14.0,
        icon: const Icon(Icons.error, size: 20, color: Colors.red),
      );
      notifyListeners();
    }
  }

  Future<void> deleteDatabase(String databaseId) async {
    try {
      _isLoading = true;
      _error = null;
      notifyListeners();

      final response = await _dio.delete('/api/collaboration/databases/$databaseId');
      
      if (response.statusCode == 200 || response.statusCode == 204) {
        _databases.removeWhere((db) => db.id == databaseId);
        
        if (_currentDatabaseId == databaseId) {
          await switchToPersonalDatabase();
        }
        
        showCustomToastWithIcon(
          '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–∞',
          accentColor: Colors.green,
          fontSize: 14.0,
          icon: const Icon(Icons.check, size: 20, color: Colors.green),
        );
      } else {
        throw Exception('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${response.statusCode}');
      }
    } catch (e) {
      _error = e.toString();
      showCustomToastWithIcon(
        '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: $e',
        accentColor: Colors.red,
        fontSize: 14.0,
        icon: const Icon(Icons.error, size: 20, color: Colors.red),
      );
      print('–û—à–∏–±–∫–∞ –≤ deleteDatabase: $e');
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è–º–∏
  Future<void> acceptInvitation(String invitationId) async {
    try {
      await _roleService.acceptInvitation(invitationId);
      await loadDatabases(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
      showCustomToastWithIcon(
        '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ',
        accentColor: Colors.green,
        fontSize: 14.0,
        icon: const Icon(Icons.check, size: 20, color: Colors.green),
      );
    } catch (e) {
      _error = e.toString();
      showCustomToastWithIcon(
        '–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: $e',
        accentColor: Colors.red,
        fontSize: 14.0,
        icon: const Icon(Icons.error, size: 20, color: Colors.red),
      );
      notifyListeners();
    }
  }

  Future<void> declineInvitation(String invitationId) async {
    try {
      await _roleService.declineInvitation(invitationId);
      await _loadPendingInvitations();
      showCustomToastWithIcon(
        '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ',
        accentColor: Colors.green,
        fontSize: 14.0,
        icon: const Icon(Icons.check, size: 20, color: Colors.green),
      );
      notifyListeners();
    } catch (e) {
      _error = e.toString();
      showCustomToastWithIcon(
        '–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: $e',
        accentColor: Colors.red,
        fontSize: 14.0,
        icon: const Icon(Icons.error, size: 20, color: Colors.red),
      );
      notifyListeners();
    }
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π
  Future<void> syncDatabase() async {
    if (_currentDatabaseId == null || !_isUsingSharedDatabase) {
      print('–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞: –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
      return;
    }
    
    // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –±–∞–∑—ã
    if (_isJustSwitchedToSharedDatabase && _lastDatabaseSwitchTime != null) {
      final timeSinceSwitch = DateTime.now().difference(_lastDatabaseSwitchTime!);
      if (timeSinceSwitch.inSeconds < 30) {
        print('–ë–õ–û–ö–ò–†–û–í–ö–ê: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ ${30 - timeSinceSwitch.inSeconds} —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –±–∞–∑—ã');
        return;
      } else {
        // –°–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
        _isJustSwitchedToSharedDatabase = false;
        _lastDatabaseSwitchTime = null;
      }
    }
    
    // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    if (_isSyncing) {
      print('–û–ø–µ—Ä–∞—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
      return;
    }
    
    try {
      _isSyncing = true;
      print('–®–ê–ì –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø: –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π –±–∞–∑—ã $_currentDatabaseId –ù–ê —Å–µ—Ä–≤–µ—Ä...');
      
      await _syncService.forceSync();
      
      showCustomToastWithIcon(
        '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ',
        accentColor: Colors.green,
        fontSize: 14.0,
        icon: const Icon(Icons.check, size: 20, color: Colors.green),
      );
      print('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π –±–∞–∑—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä');
      
    } catch (e) {
      _error = e.toString();
      showCustomToastWithIcon(
        '–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: $e',
        accentColor: Colors.red,
        fontSize: 14.0,
        icon: const Icon(Icons.error, size: 20, color: Colors.red),
      );
      print('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: $e');
    } finally {
      _isSyncing = false;
    }
  }

  Future<void> resolveConflict(SyncConflict conflict, bool useLocal) async {
    try {
      await _syncService.resolveConflict(conflict, useLocal);
      _pendingConflicts.removeWhere((c) => c.id == conflict.id);
      showCustomToastWithIcon(
        '–ö–æ–Ω—Ñ–ª–∏–∫—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω',
        accentColor: Colors.green,
        fontSize: 14.0,
        icon: const Icon(Icons.check, size: 20, color: Colors.green),
      );
      notifyListeners();
    } catch (e) {
      _error = e.toString();
      showCustomToastWithIcon(
        '–û—à–∏–±–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞: $e',
        accentColor: Colors.red,
        fontSize: 14.0,
        icon: const Icon(Icons.error, size: 20, color: Colors.red),
      );
      notifyListeners();
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  Future<List<CollaborativeDatabaseUser>> getDatabaseUsers(String databaseId) async {
    try {
      final currentUser = _authService.currentUser;
      if (currentUser == null) {
        throw Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }

      final users = await _roleService.getDatabaseUsers(databaseId);
      return users;
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ë–î: $e');
      rethrow;
    }
  }

  CollaborativeDatabaseRole? getUserRole(String databaseId) {
    return _userRoles[databaseId];
  }

  Map<String, bool> getPermissions(String databaseId) {
    return _permissions[databaseId] ?? {};
  }

  bool canEdit(String databaseId) {
    return getPermissions(databaseId)['canEdit'] ?? false;
  }

  bool canManageUsers(String databaseId) {
    return getPermissions(databaseId)['canManageUsers'] ?? false;
  }

  bool canDelete(String databaseId) {
    return getPermissions(databaseId)['canDelete'] ?? false;
  }

  @override
  void dispose() {
    _syncResultSubscription?.cancel();
    _syncStatusSubscription?.cancel();
    _syncService.dispose();
    super.dispose();
  }
} 