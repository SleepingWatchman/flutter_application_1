import 'package:flutter/material.dart';
import '../db/database_helper.dart';
import '../models/note.dart';
import '../models/folder.dart';
import '../widgets/color_picker.dart';
import '../utils/toast_utils.dart';
import 'package:flutter_markdown/flutter_markdown.dart';
import 'package:oktoast/oktoast.dart';
import 'package:flutter/services.dart';
import 'dart:io';
import 'package:path/path.dart' as path;
import 'dart:convert';
import 'package:image_picker/image_picker.dart';
import '../providers/database_provider.dart';
import 'package:provider/provider.dart';
import '../providers/enhanced_collaborative_provider.dart';


/// –≠–∫—Ä–∞–Ω –∑–∞–º–µ—Ç–æ–∫ –∏ –ø–∞–ø–æ–∫ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ë–î –¥–ª—è –∑–∞–º–µ—Ç–æ–∫
class NotesScreen extends StatefulWidget {
  const NotesScreen({super.key});

  @override
  _NotesScreenState createState() => _NotesScreenState();
}

class _NotesScreenState extends State<NotesScreen> with AutomaticKeepAliveClientMixin, WidgetsBindingObserver {
  final DatabaseHelper _dbHelper = DatabaseHelper();
  List<Folder> _folders = [];
  List<Note> _notes = [];
  Folder? _selectedFolder;
  Note? _selectedNote;
  bool _isFolderExpanded = true;
  double _previewWidth = 0.3; // Default width ratio for preview window
  String _newFolderName = '';
  Color _selectedColor = Colors.blue;
  final TextEditingController _noteTitleController = TextEditingController();
  final TextEditingController _noteContentController = TextEditingController();
  final FocusNode _noteContentFocusNode = FocusNode();
  final FocusNode _noteTitleFocusNode = FocusNode();
  bool _isLoading = false;
  bool _isActive = true;
  bool _isDataLoaded = false; // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
  String? _lastLoadedDatabaseId; // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π –±–∞–∑—ã
  DateTime? _lastSave; // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  
  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ dispose
  DatabaseProvider? _databaseProvider;
  EnhancedCollaborativeProvider? _enhancedCollaborativeProvider;
  
  // –ö—ç—à –¥–ª—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫
  Map<int?, List<Note>> _notesCache = {};
  
  // –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –ø–∞–ø–∫–∞ –¥–ª—è –∑–∞–º–µ—Ç–æ–∫ –±–µ–∑ –ø–∞–ø–∫–∏
  final Folder _noFolderCategory = Folder(
    id: 0,
    name: '–ë–µ–∑ –ø–∞–ø–∫–∏',
    color: Colors.grey[600]!,
  );

  bool _isEditing = false;

  @override
  bool get wantKeepAlive => true;

  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addObserver(this);
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –≤ initState
    _loadDataIfNeeded();
    
    // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (!mounted) return;
      
      final dbProvider = Provider.of<DatabaseProvider>(context, listen: false);
      dbProvider.addListener(_handleDatabaseChanges);
      
      final enhancedCollabProvider = Provider.of<EnhancedCollaborativeProvider>(context, listen: false);
      enhancedCollabProvider.addListener(_handleCollaborativeDatabaseChanges);
    });
  }

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ dispose
    _databaseProvider = Provider.of<DatabaseProvider>(context, listen: false);
    _enhancedCollaborativeProvider = Provider.of<EnhancedCollaborativeProvider>(context, listen: false);
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–ï –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ didChangeDependencies
    // –≠—Ç–æ —Å–æ–∑–¥–∞–µ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ —Ü–∏–∫–ª—ã –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ —è–≤–Ω–æ —á–µ—Ä–µ–∑ _handleDatabaseChanges
  }

  @override
  void dispose() {
    WidgetsBinding.instance.removeObserver(this);
    _noteTitleController.dispose();
    _noteContentController.dispose();
    _noteContentFocusNode.dispose();
    _noteTitleFocusNode.dispose();
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ—Ç–ø–∏—Å—ã–≤–∞–Ω–∏–µ –æ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π
    try {
      if (_databaseProvider != null) {
        _databaseProvider!.removeListener(_handleDatabaseChanges);
      }
      
      if (_enhancedCollaborativeProvider != null) {
        _enhancedCollaborativeProvider!.removeListener(_handleCollaborativeDatabaseChanges);
      }
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ –æ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π: $e');
    }
    
    super.dispose();
  }

  @override
  void didChangeAppLifecycleState(AppLifecycleState state) {
    if (state == AppLifecycleState.resumed && !_isActive) {
      setState(() {
        _isActive = true;
      });
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞
      final databaseProvider = Provider.of<DatabaseProvider>(context, listen: false);
      if (databaseProvider.needsUpdate) {
        print('üì± –ê–ö–¢–ò–í–ê–¶–ò–Ø: –≠–∫—Ä–∞–Ω –∑–∞–º–µ—Ç–æ–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏ —Ç—Ä–µ–±—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö');
        _forceReloadData();
        databaseProvider.resetUpdateFlag();
      } else {
        _loadData();
      }
    } else if (state == AppLifecycleState.inactive || state == AppLifecycleState.paused) {
      setState(() {
        _isActive = false;
      });
    }
  }

  Future<void> _loadData() async {
    if (_isLoading) {
      print('–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
      return;
    }
    
    // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    final databaseProvider = Provider.of<DatabaseProvider>(context, listen: false);
    if (databaseProvider.isBlocked) {
      print('‚ö†Ô∏è –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –≤–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
      return;
    }
    
    setState(() => _isLoading = true);
    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–µ–∫—É—â–µ–º—É database_id
      final enhancedCollabProvider = Provider.of<EnhancedCollaborativeProvider>(context, listen: false);
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –¢–û–õ–¨–ö–û EnhancedCollaborativeProvider –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –±–∞–∑—ã
      final currentDatabaseId = enhancedCollabProvider.isUsingSharedDatabase 
          ? enhancedCollabProvider.currentDatabaseId 
          : null;
      
      print('–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–∞–∑—ã: ${currentDatabaseId != null ? currentDatabaseId : "–ª–æ–∫–∞–ª—å–Ω–æ–π"}');
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–π –±–∞–∑—ã
      final results = await Future.wait([
        _dbHelper.getFolders(currentDatabaseId),
        _dbHelper.getAllNotes(currentDatabaseId),
      ]);
      
      if (!mounted) return;
      
      setState(() {
        _folders = results[0] as List<Folder>;
        _notes = results[1] as List<Note>;
        _updateNotesCache();
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞–ø–∫—É "–ë–µ–∑ –ø–∞–ø–∫–∏" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –ø–∞–ø–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞
        if (_selectedFolder == null) {
          _selectedFolder = _noFolderCategory;
          _isFolderExpanded = true;
        }
        
        _isLoading = false;
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥–∏ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        _isDataLoaded = true;
        _lastLoadedDatabaseId = currentDatabaseId;
      });
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: $e');
      if (mounted) {
        setState(() => _isLoading = false);
        showToast('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
      }
    }
  }

  void _updateNotesCache() {
    _notesCache.clear();
    for (var note in _notes) {
      final key = note.folderId ?? 0; // –ò—Å–ø–æ–ª—å–∑—É–µ–º 0 –¥–ª—è –∑–∞–º–µ—Ç–æ–∫ –±–µ–∑ –ø–∞–ø–∫–∏
      if (!_notesCache.containsKey(key)) {
        _notesCache[key] = [];
      }
      _notesCache[key]!.add(note);
    }
  }

  List<Note> _getNotesForFolder(Folder folder) {
    if (folder.id == _noFolderCategory.id) {
      return _notesCache[0] ?? []; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á 0 –¥–ª—è –∑–∞–º–µ—Ç–æ–∫ –±–µ–∑ –ø–∞–ø–∫–∏
    }
    return _notesCache[folder.id] ?? [];
  }

  void showToast(String message) {
    showToastWidget(
      Container(
        padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
        decoration: BoxDecoration(
          color: Colors.black87,
          borderRadius: BorderRadius.circular(4),
        ),
        child: Text(
          message,
          style: const TextStyle(color: Colors.white),
        ),
      ),
      duration: const Duration(seconds: 2),
    );
  }

  Future<void> _createNote() async {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–µ–∫—É—â–µ–º—É database_id
      final enhancedCollabProvider = Provider.of<EnhancedCollaborativeProvider>(context, listen: false);
      final currentDatabaseId = enhancedCollabProvider.isUsingSharedDatabase 
          ? enhancedCollabProvider.currentDatabaseId 
          : null;
      
      final now = DateTime.now();
      Map<String, dynamic> noteMap = {
        'title': '',
        'content': '',
        'folder_id': _selectedFolder?.id,
        'created_at': now.toIso8601String(),
        'updated_at': now.toIso8601String(),
      };
      
      // –î–æ–±–∞–≤–ª—è–µ–º database_id —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã –≤ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π –±–∞–∑–µ
      if (currentDatabaseId != null) {
        noteMap['database_id'] = currentDatabaseId;
      }
      
      final id = await _dbHelper.insertNote(noteMap);
      if (!mounted) return;

      setState(() {
        _selectedNote = Note(
          id: id,
          title: '',
          content: '',
          folderId: _selectedFolder?.id,
          createdAt: now,
          updatedAt: now,
          database_id: currentDatabaseId,
        );
        _notes.add(_selectedNote!);
        _noteTitleController.text = '';  // –ü—É—Å—Ç–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ
        _noteContentController.text = '';
        _updateNotesCache();
      });

      // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–∫–µ
      _noteTitleFocusNode.requestFocus();

      showCustomToastWithIcon(
        "–ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞",
        accentColor: Colors.green,
        fontSize: 14.0,
        icon: const Icon(Icons.check, size: 20, color: Colors.green),
      );
    } catch (e) {
      print('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏: $e');
      showCustomToastWithIcon(
        "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏",
        accentColor: Colors.yellow,
        fontSize: 14.0,
        icon: const Icon(Icons.warning, size: 20, color: Colors.yellow),
      );
    }
  }

  Future<void> _deleteNote(Note note) async {
    if (note.id == null) return;
    
    try {
      // –£–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      await _dbHelper.deleteImagesForNote(note.id!);
      
      // –£–¥–∞–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É
      await _dbHelper.deleteNote(note.id!);
      if (!mounted) return;
      
      setState(() {
        // –£–¥–∞–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞
        _notes.removeWhere((n) => n.id == note.id);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –∑–∞–º–µ—Ç–æ–∫
        _updateNotesCache();
        
        // –ï—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞, –æ—á–∏—â–∞–µ–º –ø–æ–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if (_selectedNote?.id == note.id) {
          _selectedNote = null;
          _noteTitleController.clear();
          _noteContentController.clear();
        }
      });
      
      showCustomToastWithIcon(
        "–ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞",
        accentColor: Colors.red,
        fontSize: 14.0,
        icon: const Icon(Icons.close, size: 20, color: Colors.red),
      );
    } catch (e) {
      print('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏: $e');
      showCustomToastWithIcon(
        "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏",
        accentColor: Colors.yellow,
        fontSize: 14.0,
        icon: const Icon(Icons.warning, size: 20, color: Colors.yellow),
      );
    }
  }

  Future<void> _updateNote(Note note) async {
    await _dbHelper.updateNote(note);
  }

  Future<void> _addFolder() async {
    final result = await showDialog<Map<String, dynamic>>(
      context: context,
      builder: (context) => StatefulBuilder(
        builder: (context, setState) => AlertDialog(
          title: const Text('–ù–æ–≤–∞—è –ø–∞–ø–∫–∞'),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              TextField(
                decoration: const InputDecoration(
                  labelText: '–ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏',
                  border: OutlineInputBorder(),
                ),
                onChanged: (value) {
                  setState(() {
                    _newFolderName = value;
                  });
                },
              ),
              const SizedBox(height: 16),
              ColorPicker(
                color: _selectedColor,
                onChanged: (color) {
                  setState(() {
                    _selectedColor = color;
                  });
                },
              ),
            ],
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context),
              child: const Text('–û—Ç–º–µ–Ω–∞'),
            ),
            TextButton(
              onPressed: () {
                if (_newFolderName.isNotEmpty) {
                  Navigator.pop(context, {
                    'name': _newFolderName,
                    'color': _selectedColor,
                  });
                }
              },
              child: const Text('–°–æ–∑–¥–∞—Ç—å'),
            ),
          ],
        ),
      ),
    );

    if (result != null) {
      try {
        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–µ–∫—É—â–µ–º—É database_id
        final enhancedCollabProvider = Provider.of<EnhancedCollaborativeProvider>(context, listen: false);
        final currentDatabaseId = enhancedCollabProvider.isUsingSharedDatabase 
            ? enhancedCollabProvider.currentDatabaseId 
            : null;
            
        final folder = Folder(
          name: result['name'],
          color: result['color'],
          database_id: currentDatabaseId,
        );
        
        await _dbHelper.insertFolder(folder.toMap());
        _loadData();
        showCustomToastWithIcon(
          "–ü–∞–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞",
          accentColor: Colors.green,
          fontSize: 14.0,
          icon: const Icon(Icons.check, size: 20, color: Colors.green),
        );
      } catch (e) {
        print('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏: $e');
        showCustomToastWithIcon(
          "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏",
          accentColor: Colors.yellow,
          fontSize: 14.0,
          icon: const Icon(Icons.warning, size: 20, color: Colors.yellow),
        );
      }
    }
  }

  void _deleteFolder(int index) async {
    Folder folderToDelete = _folders[index];
    if (folderToDelete.id != null) {
      try {
        await _dbHelper.deleteFolder(folderToDelete.id!);
        setState(() {
          _folders.removeAt(index);
          // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫–∏ –∏ –∏—Ö –∫—ç—à
          for (var note in _notes) {
            if (note.folderId == folderToDelete.id) {
              final updatedNote = note.copyWith(
                folderId: null,
                updatedAt: DateTime.now(),
              );
              _dbHelper.updateNote(updatedNote);
              final noteIndex = _notes.indexWhere((n) => n.id == note.id);
              if (noteIndex != -1) {
                _notes[noteIndex] = updatedNote;
              }
            }
          }
          _updateNotesCache(); // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫
          
          // –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–ø–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –ø–∞–ø–∫—É "–ë–µ–∑ –ø–∞–ø–∫–∏"
          _selectedFolder = _noFolderCategory;
          _isFolderExpanded = true;
          _selectedNote = null;
          _noteTitleController.clear();
          _noteContentController.clear();
        });
        showCustomToastWithIcon(
          "–ü–∞–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞",
          accentColor: Colors.red,
          fontSize: 14.0,
          icon: const Icon(Icons.close, size: 20, color: Colors.red),
        );
      } catch (e) {
        print('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–ø–∫–∏: $e');
        showCustomToastWithIcon(
          "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–ø–∫–∏",
          accentColor: Colors.yellow,
          fontSize: 14.0,
          icon: const Icon(Icons.warning, size: 20, color: Colors.yellow),
        );
      }
    }
  }

  Future<void> _editFolder(Folder folder) async {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    _newFolderName = folder.name;
    _selectedColor = folder.color;

    final result = await showDialog<Map<String, dynamic>>(
      context: context,
      builder: (context) => StatefulBuilder(
        builder: (context, setState) => AlertDialog(
          title: const Text('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∞–ø–∫—É'),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              TextField(
                decoration: const InputDecoration(
                  labelText: '–ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏',
                  border: OutlineInputBorder(),
                ),
                controller: TextEditingController(text: _newFolderName),
                onChanged: (value) {
                  setState(() {
                    _newFolderName = value;
                  });
                },
              ),
              const SizedBox(height: 16),
              ColorPicker(
                color: _selectedColor,
                onChanged: (color) {
                  setState(() {
                    _selectedColor = color;
                  });
                },
              ),
            ],
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context),
              child: const Text('–û—Ç–º–µ–Ω–∞'),
            ),
            TextButton(
              onPressed: () {
                if (_newFolderName.isNotEmpty) {
                  Navigator.pop(context, {
                    'name': _newFolderName,
                    'color': _selectedColor,
                  });
                }
              },
              child: const Text('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'),
            ),
          ],
        ),
      ),
    );

    if (result != null) {
      try {
        final updatedFolder = Folder(
          id: folder.id,
          name: result['name'],
          color: result['color'],
          database_id: folder.database_id, // –°–æ—Ö—Ä–∞–Ω—è–µ–º database_id –∏—Å—Ö–æ–¥–Ω–æ–π –ø–∞–ø–∫–∏
        );
        await _dbHelper.updateFolder(updatedFolder.toMap());
        _loadData();
        showCustomToastWithIcon(
          "–ü–∞–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞",
          accentColor: Colors.yellow,
          fontSize: 14.0,
          icon: const Icon(Icons.edit, size: 20, color: Colors.yellow),
        );
      } catch (e) {
        print('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞–ø–∫–∏: $e');
        showCustomToastWithIcon(
          "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞–ø–∫–∏",
          accentColor: Colors.yellow,
          fontSize: 14.0,
          icon: const Icon(Icons.warning, size: 20, color: Colors.yellow),
        );
      }
    }
  }

  Future<void> _moveNoteToFolder(Note note, Folder? folder) async {
    if (note.id == null) return;
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞–ø–∫–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–æ–π –∂–µ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      if (folder != null && folder.id != 0) {
        // –ü–æ–ª—É—á–∞–µ–º database_id –∑–∞–º–µ—Ç–∫–∏ –∏ –ø–∞–ø–∫–∏
        final noteDbId = note.database_id;
        final folderDbId = folder.database_id;
        
        print('–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –∏–∑ –±–∞–∑—ã "${noteDbId ?? '–ª–æ–∫–∞–ª—å–Ω–∞—è'}" –≤ –ø–∞–ø–∫—É –∏–∑ –±–∞–∑—ã "${folderDbId ?? '–ª–æ–∫–∞–ª—å–Ω–∞—è'}"');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–Ω–∏ –∏–∑ –æ–¥–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        if (noteDbId != folderDbId) {
          print('–û—à–∏–±–∫–∞: –Ω–µ–ª—å–∑—è –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –≤ –ø–∞–ø–∫—É –∏–∑ –¥—Ä—É–≥–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
          showToast('–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –≤ –ø–∞–ø–∫—É –∏–∑ –¥—Ä—É–≥–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
          return;
        }
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –∑–∞–º–µ—Ç–∫–∏
      final updatedNote = note.copyWith(
        folderId: folder?.id,
        updatedAt: DateTime.now(),
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º database_id –∑–∞–º–µ—Ç–∫–∏
        database_id: note.database_id,
      );
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      await _dbHelper.updateNote(updatedNote);
      
      setState(() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É –≤ —Å–ø–∏—Å–∫–µ
        final index = _notes.indexWhere((n) => n.id == note.id);
        if (index != -1) {
          _notes[index] = updatedNote;
        }
        
        // –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∞—è –≤—ã–±—Ä–∞–Ω–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –µ—ë
        if (_selectedNote?.id == note.id) {
          _selectedNote = updatedNote;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –∑–∞–º–µ—Ç–æ–∫
        _updateNotesCache();
      });
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏
      showToast('–ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞');
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏: $e');
      showToast('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏');
    }
  }

  void _toggleFolderExpansion(Folder folder) {
    setState(() {
      if (_selectedFolder?.id == folder.id) {
        _isFolderExpanded = !_isFolderExpanded;
      } else {
        _selectedFolder = folder;
        _isFolderExpanded = true;
        _selectedNote = null;
        _noteTitleController.clear();
        _noteContentController.clear();
      }
    });
  }

  Widget _buildCombinedList() {
    return ListView(
      children: [
        // –ü–∞–ø–∫–∞ "–ë–µ–∑ –ø–∞–ø–∫–∏"
        _buildFolderItem(_noFolderCategory),
        
        // –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞–ø–∫–∏
        ..._folders.map((folder) => _buildFolderItem(folder)),
      ],
    );
  }

  Widget _buildFolderItem(Folder folder) {
    final isSelected = _selectedFolder?.id == folder.id;
    final notes = _getNotesForFolder(folder);
    
    return DragTarget<Note>(
      onWillAccept: (data) => data != null && data.folderId != folder.id,
      onAccept: (data) {
        // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∑–∞–º–µ—Ç–∫—É –≤ –Ω–æ–≤—É—é –ø–∞–ø–∫—É
        _moveNoteToFolder(data, folder);
      },
      builder: (context, candidateData, rejectedData) => Column(
        children: [
          ListTile(
            leading: Icon(
              _isFolderExpanded && isSelected
                  ? Icons.folder_open
                  : Icons.folder,
              color: folder.color,
            ),
            title: Text(folder.name),
            selected: isSelected,
            selectedTileColor: isSelected ? Colors.cyan.withOpacity(0.15) : Colors.transparent, // –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π cyan –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(8),
              side: isSelected ? const BorderSide(color: Colors.cyan, width: 2) : BorderSide.none,
            ),
            trailing: Row(
              mainAxisSize: MainAxisSize.min,
              children: [
                if (notes.isNotEmpty)
                  Icon(
                    _isFolderExpanded && isSelected ? Icons.expand_less : Icons.expand_more,
                    size: 20,
                  ),
                if (folder.id != 0) // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–∞–ø–∫–∏ "–ë–µ–∑ –ø–∞–ø–∫–∏"
                  Row(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      IconButton(
                        icon: const Icon(Icons.edit),
                        onPressed: () => _editFolder(folder),
                      ),
                      IconButton(
                        icon: const Icon(Icons.delete),
                        onPressed: () => _deleteFolder(_folders.indexOf(folder)),
                      ),
                    ],
                  ),
              ],
            ),
            onTap: () => _toggleFolderExpansion(folder),
          ),
          if (_isFolderExpanded && isSelected)
            ...notes.map((note) => Draggable<Note>(
                  data: note,
                  feedback: Material(
                    elevation: 4,
                    child: Container(
                      padding: const EdgeInsets.all(8),
                      color: Colors.blue.withOpacity(0.1),
                      child: Text(
                        note.title.isEmpty ? '–ù–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞' : note.title,
                        style: const TextStyle(fontSize: 16),
                      ),
                    ),
                  ),
                  child: DragTarget<Note>(
                    onWillAccept: (data) => data != null && data.id != note.id,
                    onAccept: (data) {
                      // –ú–µ–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–º–µ—Ç–æ–∫ –≤ —Å–ø–∏—Å–∫–µ
                      final sourceIndex = notes.indexOf(data);
                      final targetIndex = notes.indexOf(note);
                      if (sourceIndex != -1 && targetIndex != -1) {
                        setState(() {
                          final item = notes.removeAt(sourceIndex);
                          notes.insert(targetIndex, item);
                        });
                      }
                    },
                    builder: (context, candidateData, rejectedData) => Container(
                      decoration: BoxDecoration(
                        border: Border(
                          top: candidateData.isNotEmpty
                              ? const BorderSide(color: Colors.blue, width: 2)
                              : BorderSide.none,
                        ),
                      ),
                      child: ListTile(
                        leading: const Icon(Icons.note),
                        title: Text(note.title.isEmpty ? '–ù–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞' : note.title),
                        selected: _selectedNote?.id == note.id,
                        selectedTileColor: _selectedNote?.id == note.id ? Colors.cyan.withOpacity(0.15) : Colors.transparent, // –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π cyan –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(8),
                          side: _selectedNote?.id == note.id ? const BorderSide(color: Colors.cyan, width: 2) : BorderSide.none,
                        ),
                        trailing: Row(
                          mainAxisSize: MainAxisSize.min,
                          children: [
                            IconButton(
                              icon: const Icon(Icons.delete),
                              onPressed: () => _deleteNote(note),
                            ),
                          ],
                        ),
                        onTap: () => _selectNote(note),
                      ),
                    ),
                  ),
                )),
        ],
      ),
    );
  }

  void _selectVirtualFolder() {
    setState(() {
      if (_selectedFolder?.id == _noFolderCategory.id) {
        _isFolderExpanded = !_isFolderExpanded;
      } else {
        _selectedFolder = _noFolderCategory;
        _isFolderExpanded = true;
        _selectedNote = null;
        _noteTitleController.clear();
        _noteContentController.clear();
      }
    });
  }

  void _editNote(Note note) {
    final titleController = TextEditingController(text: note.title);
    final contentController = TextEditingController(text: note.content);
    int? selectedFolderId = note.folderId;

    showDialog(
      context: context,
      builder: (context) => StatefulBuilder(
        builder: (context, setState) => AlertDialog(
          title: const Text('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫—É'),
          content: SingleChildScrollView(
            child: SizedBox(
              width: 400,
              child: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  TextField(
                    controller: titleController,
                    decoration: const InputDecoration(
                      labelText: '–ó–∞–≥–æ–ª–æ–≤–æ–∫',
                      hintText: '–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫',
                    ),
                  ),
                  const SizedBox(height: 16),
                  TextField(
                    controller: contentController,
                    decoration: const InputDecoration(
                      labelText: '–°–æ–¥–µ—Ä–∂–∏–º–æ–µ',
                      hintText: '–í–≤–µ–¥–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–º–µ—Ç–∫–∏',
                    ),
                    maxLines: 5,
                  ),
                  const SizedBox(height: 16),
                  DropdownButtonFormField<int?>(
                    value: selectedFolderId,
                    decoration: const InputDecoration(
                      labelText: '–ü–∞–ø–∫–∞',
                      hintText: '–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É',
                    ),
                    items: [
                      DropdownMenuItem(
                        value: null,
                        child: Text(_noFolderCategory.name),
                      ),
                      ..._folders.map((folder) => DropdownMenuItem(
                            value: folder.id,
                            child: Text(folder.name),
                          )),
                    ],
                    onChanged: (value) {
                      setState(() {
                        selectedFolderId = value;
                      });
                    },
                  ),
                ],
              ),
            ),
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context),
              child: const Text('–û—Ç–º–µ–Ω–∞'),
            ),
            TextButton(
              onPressed: () async {
                final now = DateTime.now();
                Note updatedNote = Note(
                  id: note.id,
                  title: titleController.text,
                  content: contentController.text,
                  folderId: selectedFolderId,
                  createdAt: note.createdAt,
                  updatedAt: now,
                );
                await _updateNote(updatedNote);
                this.setState(() {
                  final index = _notes.indexWhere((n) => n.id == note.id);
                  if (index != -1) {
                    _notes[index] = updatedNote;
                    _selectedNote = updatedNote;
                    _noteTitleController.text = updatedNote.title;
                    _noteContentController.text = updatedNote.content ?? '';
                  }
                });
                Navigator.pop(context);
              },
              child: const Text('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'),
            ),
          ],
        ),
      ),
    );
  }

  void _selectFolder(Folder folder) {
    setState(() {
      _selectedFolder = folder;
      _selectedNote = null;
      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–ï –∏–∑–º–µ–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ _notes –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–∞–ø–∫–∏!
      // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ –∫—ç—à –≤ –º–µ—Ç–æ–¥–µ _getNotesForFolder
      _noteTitleController.clear();
      _noteContentController.clear();
    });
  }

  void _selectNote(Note note) {
    if (!mounted) return;
    
    setState(() {
      _selectedNote = note;
      _noteTitleController.text = note.title;
      _noteContentController.text = note.content ?? '';
    });
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏
    _loadImagesForNote(note);
  }

  Future<void> _updateNoteContent(String content) async {
    if (_selectedNote == null) return;
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      final images = await _dbHelper.getImagesForNote(_selectedNote!.id!);
      final imagePaths = images.map((img) => img['file_name'] as String).toList();
      
      // –°–æ–∑–¥–∞–µ–º JSON —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö
      final contentJson = {
        'content': content,
        'images': imagePaths,
      };
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –∑–∞–º–µ—Ç–∫–∏
      final updatedNote = _selectedNote!.copyWith(
        title: _noteTitleController.text,
        content: content,
        updatedAt: DateTime.now(),
        content_json: jsonEncode(contentJson),
      );
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      await _dbHelper.updateNote(updatedNote);
      
      setState(() {
        _selectedNote = updatedNote;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É –≤ —Å–ø–∏—Å–∫–µ
        final index = _notes.indexWhere((n) => n.id == _selectedNote!.id);
        if (index != -1) {
          _notes[index] = _selectedNote!;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –∑–∞–º–µ—Ç–æ–∫
        _updateNotesCache();
      });
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏: $e');
      showToast('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏');
    }
  }

  Future<void> _updateNoteTitle(String title) async {
    if (_selectedNote == null) return;
    
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –∑–∞–º–µ—Ç–∫–∏
      final updatedNote = _selectedNote!.copyWith(
        title: title,
        updatedAt: DateTime.now(),
      );
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      await _dbHelper.updateNote(updatedNote);
      
      setState(() {
        _selectedNote = updatedNote;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É –≤ —Å–ø–∏—Å–∫–µ
        final index = _notes.indexWhere((n) => n.id == _selectedNote!.id);
        if (index != -1) {
          _notes[index] = _selectedNote!;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –∑–∞–º–µ—Ç–æ–∫
        _updateNotesCache();
      });
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞: $e');
      showToast('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞');
    }
  }

  void _debounceSave() {
    final now = DateTime.now();
    _lastSave = now;
    
    Future.delayed(const Duration(milliseconds: 500), () {
      if (_lastSave == now && mounted && _selectedNote != null) {
        _dbHelper.updateNote(_selectedNote!);
      }
    });
  }

  Widget _buildNoteEditor() {
    return Container(
      decoration: BoxDecoration(
        border: Border.all(color: Colors.grey),
        borderRadius: BorderRadius.circular(4),
      ),
      child: Column(
        children: [
          // –ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
          Container(
            padding: const EdgeInsets.all(4),
            decoration: BoxDecoration(
              border: Border(
                bottom: BorderSide(color: Colors.grey),
              ),
            ),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.end,
              children: [
                IconButton(
                  icon: const Icon(Icons.image),
                  onPressed: _handleImageSelection,
                  tooltip: '–í—Å—Ç–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
                ),
              ],
            ),
          ),
          // –†–µ–¥–∞–∫—Ç–æ—Ä
          Expanded(
            child: TextField(
              controller: _noteContentController,
              focusNode: _noteContentFocusNode,
              maxLines: null,
              expands: true,
              autofocus: true,
              decoration: const InputDecoration(
                hintText: '–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è Markdown). –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏.',
                border: InputBorder.none,
                contentPadding: EdgeInsets.all(8),
              ),
              onChanged: _updateNoteContent,
              onSubmitted: (value) {
                setState(() {
                  _isEditing = false;
                });
              },
              keyboardType: TextInputType.multiline,
              textInputAction: TextInputAction.newline,
              style: const TextStyle(
                fontSize: 16,
                height: 1.5,
              ),
              cursorColor: Colors.cyan,
              enableInteractiveSelection: true,
              showCursor: true,
              readOnly: false,
              onTapOutside: (event) {
                setState(() {
                  _isEditing = false;
                });
              },
              onEditingComplete: () {
                _debounceSave();
              },
            ),
          ),
        ],
      ),
    );
  }

  Future<void> _handleImageSelection() async {
    try {
      final result = await ImagePicker().pickImage(
        source: ImageSource.gallery,
        imageQuality: 80,
      );

      if (result == null) return;

      final file = File(result.path);
      if (!await file.exists()) {
        showCustomToastWithIcon(
          "–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
          accentColor: Colors.yellow,
          fontSize: 14.0,
          icon: const Icon(Icons.warning, size: 20, color: Colors.yellow),
        );
        return;
      }

      // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ –±–∞–π—Ç—ã
      final imageBytes = await file.readAsBytes();
      final fileName = 'image_${DateTime.now().millisecondsSinceEpoch}${path.extension(result.path)}';

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      if (_selectedNote?.id != null) {
        await _dbHelper.insertImage(
          _selectedNote!.id!,
          fileName,
          imageBytes,
        );
      }

      // –í—Å—Ç–∞–≤–ª—è–µ–º Markdown-—Å—Å—ã–ª–∫—É —Å –∏–º–µ–Ω–µ–º —Ñ–∞–π–ª–∞
      final text = _noteContentController.text;
      final selection = _noteContentController.selection;
      final beforeText = text.substring(0, selection.start);
      final afterText = text.substring(selection.end);
      
      final imageMarkdown = '\n![–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ]($fileName)\n';
      
      setState(() {
        _noteContentController.text = beforeText + imageMarkdown + afterText;
        _noteContentController.selection = TextSelection.collapsed(
          offset: selection.start + imageMarkdown.length,
        );
      });

      _updateNoteContent(_noteContentController.text);
      showCustomToastWithIcon(
        "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ",
        accentColor: Colors.green,
        fontSize: 14.0,
        icon: const Icon(Icons.check, size: 20, color: Colors.green),
      );
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: $e');
      showCustomToastWithIcon(
        "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
        accentColor: Colors.yellow,
        fontSize: 14.0,
        icon: const Icon(Icons.warning, size: 20, color: Colors.yellow),
      );
    }
  }

  Future<void> _loadImagesForNote(Note note) async {
    if (note.id == null) return;
    
    try {
      final images = await _dbHelper.getImagesForNote(note.id!);
      final imageMap = <String, Uint8List>{};
      
      for (var image in images) {
        final imageData = await _dbHelper.getImageData(image['id'] as int);
        if (imageData != null) {
          imageMap[image['file_name'] as String] = imageData;
        }
      }
      
      print('–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ ${note.id}: ${imageMap.length}');
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: $e');
    }
  }

  Widget _buildMarkdownPreview(String content) {
    return FutureBuilder<List<Map<String, dynamic>>>(
      future: _selectedNote?.id != null ? _dbHelper.getImagesForNote(_selectedNote!.id!) : Future.value([]),
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.waiting) {
          return const Center(child: CircularProgressIndicator());
        }

        if (snapshot.hasError) {
          print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${snapshot.error}');
          return const Center(child: Text('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π'));
        }

        final images = snapshot.data ?? [];
        final imageMap = <String, Uint8List>{};

        return FutureBuilder<void>(
          future: Future.wait(
            images.map((image) async {
              final imageData = await _dbHelper.getImageData(image['id'] as int);
              if (imageData != null) {
                imageMap[image['file_name'] as String] = imageData;
              }
            }),
          ),
          builder: (context, snapshot) {
            if (snapshot.connectionState == ConnectionState.waiting) {
              return const Center(child: CircularProgressIndicator());
            }

            return Markdown(
              data: content,
              selectable: true,
              imageBuilder: (uri, title, alt) {
                try {
                  // –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ URI
                  final fileName = uri.pathSegments.last;
                  var imageData = imageMap[fileName];
                  
                  if (imageData == null) {
                    print('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: $fileName');
                    
                    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –ø—É—Ç–∏
                    return FutureBuilder<Uint8List?>(
                      future: _dbHelper.findImageInAllDatabases(fileName),
                      builder: (context, imageSnapshot) {
                        if (imageSnapshot.connectionState == ConnectionState.waiting) {
                          return Container(
                            padding: const EdgeInsets.all(8),
                            decoration: BoxDecoration(
                              color: Colors.grey[200],
                              borderRadius: BorderRadius.circular(4),
                            ),
                            child: const Row(
                              mainAxisSize: MainAxisSize.min,
                              children: [
                                SizedBox(
                                  width: 16,
                                  height: 16,
                                  child: CircularProgressIndicator(strokeWidth: 2),
                                ),
                                SizedBox(width: 8),
                                Text('–ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...'),
                              ],
                            ),
                          );
                        }
                        
                        if (imageSnapshot.hasData && imageSnapshot.data != null) {
                          // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ
                          return Image.memory(
                            imageSnapshot.data!,
                            fit: BoxFit.contain,
                            errorBuilder: (context, error, stackTrace) {
                              print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: $error');
                              return Container(
                                padding: const EdgeInsets.all(8),
                                decoration: BoxDecoration(
                                  color: Colors.grey[200],
                                  borderRadius: BorderRadius.circular(4),
                                ),
                                child: Row(
                                  mainAxisSize: MainAxisSize.min,
                                  children: [
                                    Icon(Icons.broken_image, color: Colors.grey[600]),
                                    const SizedBox(width: 8),
                                    Text(
                                      '–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è',
                                      style: TextStyle(color: Colors.grey[600]),
                                    ),
                                  ],
                                ),
                              );
                            },
                          );
                        }
                        
                        // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
                        return Container(
                          padding: const EdgeInsets.all(8),
                          decoration: BoxDecoration(
                            color: Colors.grey[200],
                            borderRadius: BorderRadius.circular(4),
                          ),
                          child: Row(
                            mainAxisSize: MainAxisSize.min,
                            children: [
                              Icon(Icons.broken_image, color: Colors.grey[600]),
                              const SizedBox(width: 8),
                              Text(
                                '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
                                style: TextStyle(color: Colors.grey[600]),
                              ),
                            ],
                          ),
                        );
                      },
                    );
                  }

                  return Image.memory(
                    imageData,
                    fit: BoxFit.contain,
                    errorBuilder: (context, error, stackTrace) {
                      print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: $error');
                      return Container(
                        padding: const EdgeInsets.all(8),
                        decoration: BoxDecoration(
                          color: Colors.grey[200],
                          borderRadius: BorderRadius.circular(4),
                        ),
                        child: Row(
                          mainAxisSize: MainAxisSize.min,
                          children: [
                            Icon(Icons.broken_image, color: Colors.grey[600]),
                            const SizedBox(width: 8),
                            Text(
                              '–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è',
                              style: TextStyle(color: Colors.grey[600]),
                            ),
                          ],
                        ),
                      );
                    },
                  );
                } catch (e) {
                  print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: $e');
                  return Container(
                    padding: const EdgeInsets.all(8),
                    decoration: BoxDecoration(
                      color: Colors.grey[200],
                      borderRadius: BorderRadius.circular(4),
                    ),
                    child: Row(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        Icon(Icons.broken_image, color: Colors.grey[600]),
                        const SizedBox(width: 8),
                        Text(
                          '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏',
                          style: TextStyle(color: Colors.grey[600]),
                        ),
                      ],
                    ),
                  );
                }
              },
            );
          },
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    super.build(context);
    
    if (_isLoading) {
      return const Center(child: CircularProgressIndicator());
    }

    return Consumer<DatabaseProvider>(
      builder: (context, databaseProvider, child) {
        if (databaseProvider.needsUpdate) {
          WidgetsBinding.instance.addPostFrameCallback((_) {
            if (mounted) {
              print('üîÑ UI –û–ë–ù–û–í–õ–ï–ù–ò–ï: –≠–∫—Ä–∞–Ω –∑–∞–º–µ—Ç–æ–∫ –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ —Ñ–ª–∞–≥—É needsUpdate');
              _forceReloadData();
              databaseProvider.resetUpdateFlag();
            }
          });
        }
        
        return Scaffold(
          body: Row(
            children: [
              // –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å
              SizedBox(
                width: MediaQuery.of(context).size.width * _previewWidth,
                child: Column(
                  children: [
                    // –ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
                    Padding(
                      padding: const EdgeInsets.all(8.0),
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                        children: [
                          IconButton(
                            icon: const Icon(Icons.add),
                            onPressed: _createNote,
                          ),
                          IconButton(
                            icon: const Icon(Icons.create_new_folder),
                            onPressed: _addFolder,
                          ),
                        ],
                      ),
                    ),
                    // –°–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫ –∏ –∑–∞–º–µ—Ç–æ–∫
                    Expanded(
                      child: Container(
                        constraints: BoxConstraints(
                          maxHeight: MediaQuery.of(context).size.height,
                        ),
                        child: _buildCombinedList(),
                      ),
                    ),
                  ],
                ),
              ),
              // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
              MouseRegion(
                cursor: SystemMouseCursors.resizeColumn,
                child: GestureDetector(
                  onHorizontalDragUpdate: (details) {
                    setState(() {
                      _previewWidth += details.delta.dx / MediaQuery.of(context).size.width;
                      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –æ—Ç 20% –¥–æ 60% —ç–∫—Ä–∞–Ω–∞
                      _previewWidth = _previewWidth.clamp(0.2, 0.6);
                    });
                  },
                  child: Container(
                    width: 8,
                    color: Colors.black,
                    child: Center(
                      child: Container(
                        width: 2,
                        height: double.infinity,
                        color: Colors.cyan,
                      ),
                    ),
                  ),
                ),
              ),
              // –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å
              Expanded(
                child: _selectedNote == null
                    ? const Center(child: Text('–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É'))
                    : Column(
                        children: [
                          // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–º–µ—Ç–∫–∏
                          Padding(
                            padding: const EdgeInsets.all(8.0),
                            child: TextField(
                              controller: _noteTitleController,
                              decoration: const InputDecoration(
                                hintText: '–ù–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞',
                                border: OutlineInputBorder(),
                              ),
                              onChanged: _updateNoteTitle,
                            ),
                          ),
                          // –ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
                          Container(
                            padding: const EdgeInsets.symmetric(horizontal: 8.0, vertical: 4.0),
                            decoration: BoxDecoration(
                              border: Border(
                                bottom: BorderSide(color: Colors.grey),
                              ),
                            ),
                            child: Row(
                              mainAxisAlignment: MainAxisAlignment.end,
                              children: [
                                IconButton(
                                  icon: const Icon(Icons.image),
                                  onPressed: () {
                                    if (!_isEditing) {
                                      setState(() {
                                        _isEditing = true;
                                      });
                                    }
                                    _handleImageSelection();
                                  },
                                  tooltip: '–í—Å—Ç–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
                                ),
                              ],
                            ),
                          ),
                          // –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä/–ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
                          Expanded(
                            child: Container(
                              padding: const EdgeInsets.all(8.0),
                              child: _isEditing
                                  ? Container(
                                      decoration: BoxDecoration(
                                        border: Border.all(color: Colors.grey),
                                        borderRadius: BorderRadius.circular(4),
                                      ),
                                      child: TextField(
                                        controller: _noteContentController,
                                        focusNode: _noteContentFocusNode,
                                        maxLines: null,
                                        expands: true,
                                        autofocus: true,
                                        decoration: const InputDecoration(
                                          hintText: '–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è Markdown). –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏.',
                                          border: InputBorder.none,
                                          contentPadding: EdgeInsets.all(8),
                                        ),
                                        onChanged: _updateNoteContent,
                                        onSubmitted: (value) {
                                          setState(() {
                                            _isEditing = false;
                                          });
                                        },
                                        keyboardType: TextInputType.multiline,
                                        textInputAction: TextInputAction.newline,
                                        style: const TextStyle(
                                          fontSize: 16,
                                          height: 1.5,
                                        ),
                                        cursorColor: Colors.cyan,
                                        enableInteractiveSelection: true,
                                        showCursor: true,
                                        readOnly: false,
                                        onTapOutside: (event) {
                                          setState(() {
                                            _isEditing = false;
                                          });
                                        },
                                        onEditingComplete: () {
                                          _debounceSave();
                                        },
                                      ),
                                    )
                                  : GestureDetector(
                                      onTap: () {
                                        setState(() {
                                          _isEditing = true;
                                        });
                                      },
                                      child: Container(
                                        decoration: BoxDecoration(
                                          border: Border.all(color: Colors.grey),
                                          borderRadius: BorderRadius.circular(4),
                                        ),
                                        child: SingleChildScrollView(
                                          padding: const EdgeInsets.all(8),
                                          child: ConstrainedBox(
                                            constraints: BoxConstraints(
                                              minHeight: 0,
                                              maxHeight: MediaQuery.of(context).size.height,
                                            ),
                                            child: _selectedNote?.content?.isEmpty ?? true
                                                ? Column(
                                                    children: [
                                                      Text(
                                                        '–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è Markdown). –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏. –î–ª—è –≤—Å—Ç–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –µ–≥–æ —Å—é–¥–∞.',
                                                        style: TextStyle(
                                                          color: Colors.grey,
                                                          fontSize: 16,
                                                        ),
                                                      ),
                                                    ],
                                                  )
                                                : _buildMarkdownPreview(_selectedNote?.content ?? ''),
                                          ),
                                        ),
                                      ),
                                    ),
                            ),
                          ),
                        ],
                      ),
              ),
            ],
          ),
        );
      },
    );
  }

  Future<void> _handleNoteUpdate(Note note) async {
    await _dbHelper.updateNote(note);
  }

  Future<void> _handleNoteDelete(Note note) async {
    await _dbHelper.deleteNote(note.id!);
  }

  Future<void> _handleNoteMove(Note note, int newFolderId) async {
    final updatedNote = note.copyWith(
      folderId: newFolderId,
      updatedAt: DateTime.now(),
    );
    await _dbHelper.updateNote(updatedNote);
  }

  Future<void> _handleNoteCopy(Note note) async {
    final newNote = Note(
      title: '${note.title} (–∫–æ–ø–∏—è)',
      content: note.content,
      folderId: note.folderId,
      createdAt: DateTime.now(),
      updatedAt: DateTime.now(),
    );
    await _dbHelper.insertNote(newNote.toMap());
  }

  Future<void> _saveNote() async {
    if (_selectedNote != null) {
      final updatedNote = _selectedNote!.copyWith(
        title: _noteTitleController.text,
        content: _noteContentController.text,
        updatedAt: DateTime.now(),
      );
      await _dbHelper.updateNote(updatedNote);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  void _handleDatabaseChanges() {
    if (mounted) {
      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±–∏—Ä–∞–µ–º –∏–∑–±—ã—Ç–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
      
      // –ó–ê–©–ò–¢–ê –û–¢ –¶–ò–ö–õ–û–í: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥–∏ –∑–∞–≥—Ä—É–∑–∫–∏
      if (_isLoading) {
        print('–ó–∞–≥—Ä—É–∑–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏–π');
        return;
      }
      
      final databaseProvider = Provider.of<DatabaseProvider>(context, listen: false);
      final enhancedCollabProvider = Provider.of<EnhancedCollaborativeProvider>(context, listen: false);
      final currentDatabaseId = enhancedCollabProvider.isUsingSharedDatabase 
          ? enhancedCollabProvider.currentDatabaseId 
          : null;
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–∑—ã, —Ç–∞–∫ –∏ —Ñ–ª–∞–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      if (_lastLoadedDatabaseId != currentDatabaseId || databaseProvider.needsUpdate) {
        // –ó–ê–©–ò–¢–ê –û–¢ –¶–ò–ö–õ–û–í: –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –î–û –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
        final wasUpdateNeeded = databaseProvider.needsUpdate;
        if (wasUpdateNeeded) {
          databaseProvider.resetUpdateFlag();
        }
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º _loadDataIfNeeded –≤–º–µ—Å—Ç–æ _forceReloadData –¥–ª—è –º–µ–Ω–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
        _loadDataIfNeeded();
      }
    }
  }
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  void _handleCollaborativeDatabaseChanges() {
    if (mounted) {
      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±–∏—Ä–∞–µ–º –∏–∑–±—ã—Ç–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
      
      // –ó–ê–©–ò–¢–ê –û–¢ –¶–ò–ö–õ–û–í: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥–∏ –∑–∞–≥—Ä—É–∑–∫–∏
      if (_isLoading) {
        print('–ó–∞–≥—Ä—É–∑–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π –±–∞–∑—ã');
        return;
      }
      
      final databaseProvider = Provider.of<DatabaseProvider>(context, listen: false);
      final enhancedCollabProvider = Provider.of<EnhancedCollaborativeProvider>(context, listen: false);
      final currentDatabaseId = enhancedCollabProvider.isUsingSharedDatabase 
          ? enhancedCollabProvider.currentDatabaseId 
          : null;
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–∑—ã, —Ç–∞–∫ –∏ —Ñ–ª–∞–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      if (_lastLoadedDatabaseId != currentDatabaseId || databaseProvider.needsUpdate) {
        // –ó–ê–©–ò–¢–ê –û–¢ –¶–ò–ö–õ–û–í: –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –î–û –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
        final wasUpdateNeeded = databaseProvider.needsUpdate;
        if (wasUpdateNeeded) {
          databaseProvider.resetUpdateFlag();
        }
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º _loadDataIfNeeded –≤–º–µ—Å—Ç–æ _forceReloadData –¥–ª—è –º–µ–Ω–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
        _loadDataIfNeeded();
      }
    }
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —É—Å–ª–æ–≤–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
  void _loadDataIfNeeded() {
    // –ó–ê–©–ò–¢–ê –û–¢ –¶–ò–ö–õ–û–í: –ù–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –µ—Å–ª–∏ —É–∂–µ –∏–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞
    if (_isLoading) {
      print('–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º _loadDataIfNeeded');
      return;
    }
    
    final enhancedCollabProvider = Provider.of<EnhancedCollaborativeProvider>(context, listen: false);
    final currentDatabaseId = enhancedCollabProvider.isUsingSharedDatabase 
        ? enhancedCollabProvider.currentDatabaseId 
        : null;
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–∞–∑–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    if (!_isDataLoaded || _lastLoadedDatabaseId != currentDatabaseId) {
      print('–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞: _isDataLoaded=$_isDataLoaded, _lastLoadedDatabaseId=$_lastLoadedDatabaseId, currentDatabaseId=$currentDatabaseId');
      _loadData();
    } else {
      print('–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è');
    }
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
  void _forceReloadData() {
    _isDataLoaded = false;
    _lastLoadedDatabaseId = null;
    _notesCache.clear();
    _loadData();
  }
} 