import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:intl/intl.dart';
import 'dart:convert';
import 'package:mask_text_input_formatter/mask_text_input_formatter.dart';
import '../widgets/calendar_grid.dart';
import '../db/database_helper.dart';
import '../models/schedule_entry.dart';
import '../models/dynamic_field_entry.dart';
import '../utils/toast_utils.dart';
import '../providers/database_provider.dart';
import '../providers/enhanced_collaborative_provider.dart';
import '../widgets/tag_input_widget.dart';
import 'dart:math' as math;

/// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–±—ã—Ç–∏—è–º–∏ –∏ –∏—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º–∏
class EventWithTime {
  final ScheduleEntry entry;
  final int startMinute;
  final int endMinute;
  
  EventWithTime({
    required this.entry,
    required this.startMinute,
    required this.endMinute,
  });
}

/// –≠–∫—Ä–∞–Ω —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ï—Å–ª–∏ –¥–µ–Ω—å –Ω–µ –≤—ã–±—Ä–∞–Ω (_selectedDate == null), –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–∞—è —Å–µ—Ç–∫–∞.
/// –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –¥–µ–Ω—å, –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏ –∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º –∑–∞–º–µ—Ç–∫–∏.
class ScheduleScreen extends StatefulWidget {
  const ScheduleScreen({Key? key}) : super(key: key);

  @override
  _ScheduleScreenState createState() => _ScheduleScreenState();
}

class _ScheduleScreenState extends State<ScheduleScreen> with WidgetsBindingObserver {
  DateTime? _selectedDate; // –ï—Å–ª–∏ null ‚Äì –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
  DateTime? _highlightedDate; // –î–∞—Ç–∞, –≤—ã–±—Ä–∞–Ω–Ω–∞—è –ø–µ—Ä–≤—ã–º –∫–ª–∏–∫–æ–º
  DateTime _currentMonth = DateTime.now(); // –¢–µ–∫—É—â–∏–π –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π –º–µ—Å—è—Ü
  List<ScheduleEntry> _scheduleEntries = [];
  int? _selectedIndex;
  bool _isActive = true;
  bool _isLoading = false; // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
  bool _isDataLoaded = false; // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
  String? _lastLoadedDatabaseId; // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π –±–∞–∑—ã
  
  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ dispose
  DatabaseProvider? _databaseProvider;
  EnhancedCollaborativeProvider? _enhancedCollaborativeProvider;

  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addObserver(this);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (!mounted) return;
      try {
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ DatabaseProvider
        final dbProvider = Provider.of<DatabaseProvider>(context, listen: false);
        dbProvider.addListener(_handleDatabaseChanges);
        
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ EnhancedCollaborativeProvider
        final collabProvider = Provider.of<EnhancedCollaborativeProvider>(context, listen: false);
        collabProvider.addListener(_handleCollaborativeDatabaseChanges);
      } catch (e) {
        print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ª—É—à–∞—Ç–µ–ª–µ–π: $e');
      }
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞
      if (_selectedDate != null) {
        _loadSchedule();
      }
    });
  }

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ dispose
    _databaseProvider = Provider.of<DatabaseProvider>(context, listen: false);
    _enhancedCollaborativeProvider = Provider.of<EnhancedCollaborativeProvider>(context, listen: false);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–ª–∞–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if (_databaseProvider!.needsUpdate && _selectedDate != null) {
      _forceReloadSchedule();
      _databaseProvider!.resetUpdateFlag();
    }
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–∞–∑–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
    if (_selectedDate != null) {
      _loadScheduleIfNeeded();
    }
  }

  @override
  void dispose() {
    WidgetsBinding.instance.removeObserver(this);
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–ª—É—à–∞—Ç–µ–ª–µ–π
    try {
      if (_databaseProvider != null) {
        _databaseProvider!.removeListener(_handleDatabaseChanges);
      }
      
      if (_enhancedCollaborativeProvider != null) {
        _enhancedCollaborativeProvider!.removeListener(_handleCollaborativeDatabaseChanges);
      }
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª—É—à–∞—Ç–µ–ª–µ–π: $e');
    }
    
    super.dispose();
  }

  @override
  void didChangeAppLifecycleState(AppLifecycleState state) {
    if (state == AppLifecycleState.resumed && !_isActive) {
      setState(() {
        _isActive = true;
      });
      if (_selectedDate != null) {
        _loadSchedule();
      }
    } else if (state == AppLifecycleState.inactive || state == AppLifecycleState.paused) {
      setState(() {
        _isActive = false;
      });
    }
  }

  // –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∫–ª–∏–∫–µ –Ω–∞ –¥–µ–Ω—å –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–π —Å–µ—Ç–∫–µ
  void _onDateHighlighted(DateTime date) {
    setState(() {
      _highlightedDate = date;
    });
  }

  // –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–Ω—è –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–π —Å–µ—Ç–∫–∏ - –≤—Ç–æ—Ä–æ–π –∫–ª–∏–∫ –∏–ª–∏ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
  void _onDateSelected(DateTime date) {
    setState(() {
      _selectedDate = date;
      _highlightedDate = null;
    });
    _loadSchedule();
  }

  // –í–æ–∑–≤—Ä–∞—Ç –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é
  void _goBackToCalendar() {
    setState(() {
      _selectedDate = null;
      _highlightedDate = null;
      _scheduleEntries.clear();
      _selectedIndex = null;
    });
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  void _handleDatabaseChanges() {
    if (mounted) {
      final databaseProvider = Provider.of<DatabaseProvider>(context, listen: false);
      final enhancedCollabProvider = Provider.of<EnhancedCollaborativeProvider>(context, listen: false);
      final currentDatabaseId = enhancedCollabProvider.isUsingSharedDatabase 
          ? enhancedCollabProvider.currentDatabaseId 
          : null;
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–∑—ã, —Ç–∞–∫ –∏ —Ñ–ª–∞–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      if ((_lastLoadedDatabaseId != currentDatabaseId || databaseProvider.needsUpdate) && _selectedDate != null) {
        // –ó–ê–©–ò–¢–ê –û–¢ –¶–ò–ö–õ–û–í: –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ü–û–°–õ–ï –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        final wasUpdateNeeded = databaseProvider.needsUpdate;
        if (wasUpdateNeeded) {
          databaseProvider.resetUpdateFlag();
          print('üîÑ –û–ë–ù–û–í–õ–ï–ù–ò–ï: –§–ª–∞–≥ needsUpdate —Å–±—Ä–æ—à–µ–Ω –¥–ª—è —ç–∫—Ä–∞–Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è');
        }
        _forceReloadSchedule();
      }
    }
  }
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  void _handleCollaborativeDatabaseChanges() {
    if (mounted) {
      final databaseProvider = Provider.of<DatabaseProvider>(context, listen: false);
      final enhancedCollabProvider = Provider.of<EnhancedCollaborativeProvider>(context, listen: false);
      final currentDatabaseId = enhancedCollabProvider.isUsingSharedDatabase 
          ? enhancedCollabProvider.currentDatabaseId 
          : null;
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–∑—ã, —Ç–∞–∫ –∏ —Ñ–ª–∞–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      if ((_lastLoadedDatabaseId != currentDatabaseId || databaseProvider.needsUpdate) && _selectedDate != null) {
        // –ó–ê–©–ò–¢–ê –û–¢ –¶–ò–ö–õ–û–í: –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ü–û–°–õ–ï –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        final wasUpdateNeeded = databaseProvider.needsUpdate;
        if (wasUpdateNeeded) {
          databaseProvider.resetUpdateFlag();
          print('ü§ù –ö–û–õ–õ–ê–ë–û–†–ê–¶–ò–Ø: –§–ª–∞–≥ needsUpdate —Å–±—Ä–æ—à–µ–Ω –¥–ª—è —ç–∫—Ä–∞–Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è');
        }
        _forceReloadSchedule();
      }
    }
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —É—Å–ª–æ–≤–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
  void _loadScheduleIfNeeded() {
    if (_selectedDate == null) return;
    
    final collabProvider = Provider.of<EnhancedCollaborativeProvider>(context, listen: false);
    final currentDatabaseId = collabProvider.isUsingSharedDatabase 
        ? collabProvider.currentDatabaseId 
        : null;
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–∞–∑–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    if (!_isDataLoaded || _lastLoadedDatabaseId != currentDatabaseId) {
      _loadSchedule();
    }
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
  void _forceReloadSchedule() {
    _isDataLoaded = false;
    _lastLoadedDatabaseId = null;
    if (_selectedDate != null) {
      _loadSchedule();
    }
  }

  Future<void> _loadSchedule() async {
    if (_selectedDate == null) return;
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
    if (_isLoading) {
      print('–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
      return;
    }
    
    // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    final databaseProvider = Provider.of<DatabaseProvider>(context, listen: false);
    if (databaseProvider.isBlocked) {
      print('‚ö†Ô∏è –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –≤–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
      return;
    }
    
    setState(() => _isLoading = true);
    
    String dateKey = DateFormat('yyyy-MM-dd').format(_selectedDate!);
    
    try {
      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ EnhancedCollaborativeProvider
      final enhancedCollabProvider = Provider.of<EnhancedCollaborativeProvider>(context, listen: false);
      final currentDatabaseId = enhancedCollabProvider.isUsingSharedDatabase 
          ? enhancedCollabProvider.currentDatabaseId 
          : null;
      
      print('–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –±–∞–∑—ã: ${currentDatabaseId ?? "–ª–æ–∫–∞–ª—å–Ω–æ–π"}');
      
      final entries = await DatabaseHelper().getScheduleEntries(currentDatabaseId);
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø–∏—Å–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
      List<ScheduleEntry> directEntries = entries.where((entry) => entry.date == dateKey).toList();
      
      // –°–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–æ–±—ã—Ç–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–∫–∞–∑–∞–Ω—ã –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
      List<ScheduleEntry> recurringEntries = [];
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–æ–±—ã—Ç–∏—è
      for (var entry in entries) {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è —ç—Ç–æ–π –¥–∞—Ç—ã (—É–∂–µ –≤–∫–ª—é—á–µ–Ω—ã –≤—ã—à–µ)
        if (entry.date == dateKey) continue;
        
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å–∏ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
        if (entry.recurrence.type == RecurrenceType.none) continue;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–ª–∂–Ω–æ –ª–∏ —ç—Ç–æ –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è —Å–æ–±—ã—Ç–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å
        if (_shouldShowRecurringEntry(entry, _selectedDate!)) {
          // –ö–ª–æ–Ω–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å —Å –¥–∞—Ç–æ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è
          ScheduleEntry clonedEntry = ScheduleEntry(
            id: entry.id,
            time: entry.time,
            date: dateKey,
            note: entry.note,
            dynamicFieldsJson: entry.dynamicFieldsJson,
            recurrence: entry.recurrence,
          );
          recurringEntries.add(clonedEntry);
        }
      }
      
      if (mounted) {
        setState(() {
          // –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø—Ä—è–º—ã–µ –∑–∞–ø–∏—Å–∏ –∏ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è
          _scheduleEntries = [...directEntries, ...recurringEntries];
          
          // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è
          _scheduleEntries.sort((a, b) {
            final aTimes = a.time.split(' - ');
            final bTimes = b.time.split(' - ');
            
            if (aTimes.length < 2 || bTimes.length < 2) {
              // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
              return 0;
            }
            
            final aStart = aTimes[0].split(':');
            final bStart = bTimes[0].split(':');
            
            if (aStart.length < 2 || bStart.length < 2) {
              // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
              return 0;
            }
            
            try {
              final aStartMinutes = int.parse(aStart[0]) * 60 + int.parse(aStart[1]);
              final bStartMinutes = int.parse(bStart[0]) * 60 + int.parse(bStart[1]);
              
              if (aStartMinutes != bStartMinutes) {
                return aStartMinutes.compareTo(bStartMinutes);
              }
              
              final aEnd = aTimes[1].split(':');
              final bEnd = bTimes[1].split(':');
              
              if (aEnd.length < 2 || bEnd.length < 2) {
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
                return 0;
              }
              
              final aEndMinutes = int.parse(aEnd[0]) * 60 + int.parse(aEnd[1]);
              final bEndMinutes = int.parse(bEnd[0]) * 60 + int.parse(bEnd[1]);
              
              return aEndMinutes.compareTo(bEndMinutes);
            } catch (e) {
              print('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ –∑–∞–ø–∏—Å–µ–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: $e');
              return 0;
            }
          });
          _selectedIndex = null;
          
          // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥–∏ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
          _isLoading = false;
          _isDataLoaded = true;
          _lastLoadedDatabaseId = currentDatabaseId;
        });
      }
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: $e');
      
      if (mounted) {
        setState(() => _isLoading = false);
        
        // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
        Future.delayed(Duration(milliseconds: 500), () {
          if (mounted) {
            _loadSchedule();
          }
        });
      }
    }
  }
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –¥–æ–ª–∂–Ω–æ –ª–∏ –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è —Å–æ–±—ã—Ç–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
  bool _shouldShowRecurringEntry(ScheduleEntry entry, DateTime targetDate) {
    // –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–π—Å—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º false
    if (entry.recurrence.type == RecurrenceType.none) return false;
    
    // –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Å–æ–±—ã—Ç–∏—è
    DateTime startDate = DateFormat('yyyy-MM-dd').parse(entry.date);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ —Ü–µ–ª–µ–≤–∞—è –¥–∞—Ç–∞ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
    if (entry.recurrence.endDate != null && targetDate.isAfter(entry.recurrence.endDate!)) {
      return false;
    }
    
    // –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
    int interval = entry.recurrence.interval ?? 1;
    
    switch (entry.recurrence.type) {
      case RecurrenceType.daily:
        // –î–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∞—Ç–Ω–æ—Å—Ç—å –¥–Ω–µ–π
        int daysDifference = targetDate.difference(startDate).inDays;
        return daysDifference > 0 && daysDifference % interval == 0;
        
      case RecurrenceType.weekly:
        // –î–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ —Å–æ–≤–ø–∞–¥–∞–µ—Ç –∏ –ø—Ä–æ—à–ª–æ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–¥–µ–ª—å
        if (targetDate.weekday != startDate.weekday) return false;
        int weeksDifference = targetDate.difference(startDate).inDays ~/ 7;
        return weeksDifference > 0 && weeksDifference % interval == 0;
        
      case RecurrenceType.monthly:
        // –î–ª—è –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
        if (targetDate.day != startDate.day) return false;
        
        // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤ –º–µ–∂–¥—É –¥–∞—Ç–∞–º–∏
        int monthsDifference = (targetDate.year - startDate.year) * 12 + targetDate.month - startDate.month;
        return monthsDifference > 0 && monthsDifference % interval == 0;
        
      case RecurrenceType.yearly:
        // –î–ª—è –µ–∂–µ–≥–æ–¥–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–Ω—å –∏ –º–µ—Å—è—Ü
        if (targetDate.day != startDate.day || targetDate.month != startDate.month) return false;
        
        // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ—Ç –º–µ–∂–¥—É –¥–∞—Ç–∞–º–∏
        int yearsDifference = targetDate.year - startDate.year;
        return yearsDifference > 0 && yearsDifference % interval == 0;
        
      default:
        return false;
    }
  }

  bool _checkTimeOverlap(String newTime, {int? excludeIndex}) {
    final newTimes = newTime.split(' - ');
    final newStart = newTimes[0].split(':');
    final newEnd = newTimes[1].split(':');
    final newStartMinutes = int.parse(newStart[0]) * 60 + int.parse(newStart[1]);
    final newEndMinutes = int.parse(newEnd[0]) * 60 + int.parse(newEnd[1]);

    for (int i = 0; i < _scheduleEntries.length; i++) {
      if (excludeIndex != null && i == excludeIndex) continue;
      
      final entry = _scheduleEntries[i];
      final entryTimes = entry.time.split(' - ');
      final entryStart = entryTimes[0].split(':');
      final entryEnd = entryTimes[1].split(':');
      final entryStartMinutes = int.parse(entryStart[0]) * 60 + int.parse(entryStart[1]);
      final entryEndMinutes = int.parse(entryEnd[0]) * 60 + int.parse(entryEnd[1]);

      if ((newStartMinutes >= entryStartMinutes && newStartMinutes < entryEndMinutes) ||
          (newEndMinutes > entryStartMinutes && newEndMinutes <= entryEndMinutes) ||
          (newStartMinutes <= entryStartMinutes && newEndMinutes >= entryEndMinutes)) {
        return true;
      }
    }
    return false;
  }

  Future<bool> _showTimeOverlapDialog() async {
    final result = await showDialog<String>(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ'),
        content: const Text('–í—ã–±—Ä–∞–Ω–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Å–æ–±—ã—Ç–∏–µ–º.'),
        actions: [
          TextButton(
            onPressed: () {
              Navigator.of(context).pop('cancel');
            },
            child: const Text('–û—Ç–º–µ–Ω–∏—Ç—å –∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è'),
          ),
          TextButton(
            onPressed: () {
              Navigator.of(context).pop('continue');
            },
            child: const Text('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º'),
          ),
        ],
      ),
    );
    return result == 'continue';
  }

  // –ú–µ—Ç–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –º–∞—Å–∫–æ–π –¥–ª—è –ø–æ–ª—è –≤—Ä–µ–º–µ–Ω–∏.
  void _addScheduleEntry() {
    final TextEditingController timeController = TextEditingController();
    final TextEditingController shortNoteController = TextEditingController();
    final timeMaskFormatter = MaskTextInputFormatter(
      mask: '##:## - ##:##',
      filter: {'#': RegExp(r'[0-9]')},
    );
    List<DynamicFieldEntry> dynamicFields = [
      DynamicFieldEntry(key: '–ü—Ä–µ–¥–º–µ—Ç', value: '')
    ];
    List<String> tags = []; // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤
    String? timeError;

    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç–∏
    Recurrence recurrence = Recurrence();
    final TextEditingController intervalController = TextEditingController(text: '1');
    final TextEditingController countController = TextEditingController();
    DateTime? selectedEndDate;

    // –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–µ–∫—É—â–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    String? databaseId;
    try {
      final collabProvider = Provider.of<EnhancedCollaborativeProvider>(context, listen: false);
      if (collabProvider.isUsingSharedDatabase) {
        databaseId = collabProvider.currentDatabaseId;
      }
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π –±–∞–∑–µ: $e');
    }

    showDialog(
      context: context,
      builder: (context) => StatefulBuilder(
          builder: (BuildContext context, StateSetter setState) {
            return AlertDialog(
            title: const Text('–î–æ–±–∞–≤–∏—Ç—å –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ'),
              content: SingleChildScrollView(
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                  // –ü–æ–ª–µ –≤—Ä–µ–º–µ–Ω–∏
                    TextField(
                      controller: timeController,
                      inputFormatters: [timeMaskFormatter],
                      decoration: InputDecoration(
                      labelText: '–í—Ä–µ–º—è (–ß–ß:–ú–ú - –ß–ß:–ú–ú)',
                        errorText: timeError,
                      suffixIcon: IconButton(
                        icon: const Icon(Icons.schedule),
                        onPressed: () {
                          showTimePicker(
                            context: context,
                            initialTime: TimeOfDay.now(),
                          ).then((startTime) {
                            if (startTime != null) {
                              showTimePicker(
                                context: context,
                                initialTime: TimeOfDay(
                                  hour: (startTime.hour + 1) % 24,
                                  minute: startTime.minute,
                        ),
                              ).then((endTime) {
                                if (endTime != null) {
                                  timeController.text = 
                                    '${startTime.hour.toString().padLeft(2, '0')}:${startTime.minute.toString().padLeft(2, '0')} - ${endTime.hour.toString().padLeft(2, '0')}:${endTime.minute.toString().padLeft(2, '0')}';
                                }
                              });
                            }
                              });
                            },
                          ),
                    ),
                  ),
                  const SizedBox(height: 16),
                      
                  // –ü–æ–ª–µ –∫—Ä–∞—Ç–∫–æ–π –∑–∞–º–µ—Ç–∫–∏
                        TextField(
                    controller: shortNoteController,
                          decoration: const InputDecoration(
                      labelText: '–ö—Ä–∞—Ç–∫–∞—è –∑–∞–º–µ—Ç–∫–∞',
                          ),
                    maxLines: 3,
                        ),
                  const SizedBox(height: 16),
                    
                    // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è
                  ...dynamicFields.asMap().entries.map((entry) {
                    int index = entry.key;
                    DynamicFieldEntry field = entry.value;
                        return Row(
                          children: [
                            Expanded(
                              child: TextField(
                                controller: field.keyController,
                            decoration: const InputDecoration(labelText: '–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è'),
                              ),
                            ),
                            const SizedBox(width: 8),
                            Expanded(
                              child: TextField(
                                controller: field.valueController,
                            decoration: const InputDecoration(labelText: '–ó–Ω–∞—á–µ–Ω–∏–µ'),
                              ),
                            ),
                            IconButton(
                          icon: const Icon(Icons.delete),
                              onPressed: () {
                                setState(() {
                              dynamicFields.removeAt(index);
                                });
                              },
                            ),
                          ],
                        );
                      }).toList(),
                  
                  // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—è
                  TextButton.icon(
                    icon: const Icon(Icons.add),
                    label: const Text('–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ'),
                        onPressed: () {
                          setState(() {
                        dynamicFields.add(DynamicFieldEntry(key: '', value: ''));
                          });
                        },
                  ),
                  
                  const SizedBox(height: 16),
                  
                  // –í–∏–¥–∂–µ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–≥–∞–º–∏
                  const Text('–¢–µ–≥–∏:', style: TextStyle(fontWeight: FontWeight.bold)),
                  const SizedBox(height: 8),
                  TagInputWidget(
                    initialTags: tags,
                    onTagsChanged: (newTags) {
                      tags = newTags;
                    },
                    hintText: '–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥...',
                    maxTags: 10,
                  ),
                  
                  const SizedBox(height: 16),
                  ],
                ),
              ),
              actions: [
                TextButton(
                  onPressed: () {
                    Navigator.pop(context);
                  },
                  child: const Text('–û—Ç–º–µ–Ω–∞'),
                ),
                TextButton(
                  onPressed: () async {
                    if (timeController.text.isEmpty ||
                        !RegExp(r'^([0-9]{2}):([0-9]{2}) - ([0-9]{2}):([0-9]{2})$')
                            .hasMatch(timeController.text)) {
                      setState(() {
                        timeError = '–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á—á:–º–º - —á—á:–º–º';
                      });
                      return;
                    }

                    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–∏
                    String timeStr = timeController.text.trim();
                    List<String> timeParts = timeStr.split(' - ');
                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —É–∂–µ –±—ã–ª–∞ –≤—ã—à–µ, –Ω–æ –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã –æ—Å—Ç–∞–≤–∏–º —á–∞—Å—Ç–∏—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
                    if (timeParts.length != 2) {
                      setState(() {
                        timeError = '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏';
                      });
                      return;
                    }

                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                    List<String> startTimeParts = timeParts[0].split(':');
                    if (startTimeParts.length != 2) {
                      setState(() {
                        timeError = '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞';
                      });
                      return;
                    }

                    int startHour = int.tryParse(startTimeParts[0]) ?? -1;
                    int startMinute = int.tryParse(startTimeParts[1]) ?? -1;
                    
                    if (startHour < 0 || startHour > 23 || startMinute < 0 || startMinute > 59) {
                      setState(() {
                        timeError = '–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 00:00 –¥–æ 23:59';
                      });
                      return;
                    }

                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–µ—á–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                    List<String> endTimeParts = timeParts[1].split(':');
                    if (endTimeParts.length != 2) {
                      setState(() {
                        timeError = '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è';
                      });
                      return;
                    }

                    int endHour = int.tryParse(endTimeParts[0]) ?? -1;
                    int endMinute = int.tryParse(endTimeParts[1]) ?? -1;
                    
                    if (endHour < 0 || endHour > 23 || endMinute < 0 || endMinute > 59) {
                      setState(() {
                        timeError = '–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 00:00 –¥–æ 23:59';
                      });
                      return;
                    }

                    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∏ –∫–æ–Ω–µ—á–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                    final startTimeMinutes = startHour * 60 + startMinute;
                    final endTimeMinutes = endHour * 60 + endMinute;
                    
                    if (startTimeMinutes >= endTimeMinutes) {
                      setState(() {
                        timeError = '–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è';
                      });
                      return;
                    }
                    
                    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã
                    setState(() {
                      timeError = null;
                    });

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–æ–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
                    if (_checkTimeOverlap(timeController.text)) {
                      _showTimeOverlapDialog().then((shouldContinue) {
                        if (shouldContinue != true) {
                          return; // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
                        }
                        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
                      _saveNewScheduleEntry(timeController, shortNoteController, dynamicFields, recurrence, databaseId, tags);
                      });
                    } else {
                      // –ù–µ—Ç –Ω–∞–ª–æ–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ä–∞–∑—É
                    _saveNewScheduleEntry(timeController, shortNoteController, dynamicFields, recurrence, databaseId, tags);
                    }
                  },
                  child: const Text('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'),
                ),
              ],
            );
          },
      ),
    );
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
  void _saveNewScheduleEntry(TextEditingController timeController, TextEditingController shortNoteController, 
      List<DynamicFieldEntry> dynamicFields, Recurrence recurrence, String? databaseId, List<String> tags) {
    // –°–æ–±–∏—Ä–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è
    Map<String, String> dynamicMap = {};
    for (var field in dynamicFields) {
      dynamicMap[field.keyController.text] = field.valueController.text;
    }

    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∑–∞–ø–∏—Å–∏
    ScheduleEntry entry = ScheduleEntry(
      time: timeController.text,
      date: DateFormat('yyyy-MM-dd').format(_selectedDate!),
      note: shortNoteController.text.trim(),
      dynamicFieldsJson: jsonEncode(dynamicMap),
      recurrence: recurrence,
      databaseId: databaseId, // –î–æ–±–∞–≤–ª—è–µ–º ID –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      tags: tags, // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥–∏
    );

    print('–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ –±–∞–∑–µ: ${databaseId ?? "–ª–æ–∫–∞–ª—å–Ω–∞—è"}');
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
    DatabaseHelper().insertScheduleEntry(entry.toMap()).then((_) {
      if (!mounted) return;
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π
      setState(() {
        _loadSchedule();
      });
      Navigator.pop(context);
      showCustomToastWithIcon(
        "–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞",
        accentColor: Colors.green,
        fontSize: 14.0,
        icon: const Icon(Icons.check, size: 20, color: Colors.green),
      );
    });
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
  String _getIntervalHelperText(RecurrenceType type) {
    switch (type) {
      case RecurrenceType.daily:
        return '–ü–æ–≤—Ç–æ—Ä—è—Ç—å –∫–∞–∂–¥—ã–µ X –¥–Ω–µ–π';
      case RecurrenceType.weekly:
        return '–ü–æ–≤—Ç–æ—Ä—è—Ç—å –∫–∞–∂–¥—ã–µ X –Ω–µ–¥–µ–ª—å';
      case RecurrenceType.monthly:
        return '–ü–æ–≤—Ç–æ—Ä—è—Ç—å –∫–∞–∂–¥—ã–µ X –º–µ—Å—è—Ü–µ–≤';
      case RecurrenceType.yearly:
        return '–ü–æ–≤—Ç–æ—Ä—è—Ç—å –∫–∞–∂–¥—ã–µ X –ª–µ—Ç';
      default:
        return '';
    }
  }

  // –ú–µ—Ç–æ–¥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–∞—Å–∫–∏ –¥–ª—è –ø–æ–ª—è –≤—Ä–µ–º–µ–Ω–∏.
  void _editScheduleEntry(ScheduleEntry entry) {
    // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –∑–∞–ø–∏—Å–∏
    final index = _scheduleEntries.indexOf(entry);
    if (index != -1) {
      _editSchedule(index);
    }
  }

  // –ú–µ—Ç–æ–¥ —É–¥–∞–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
  void _deleteScheduleEntryByEntry(ScheduleEntry entry) {
    // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –∑–∞–ø–∏—Å–∏
    final index = _scheduleEntries.indexOf(entry);
    if (index != -1) {
      _deleteScheduleEntry(index);
    }
  }

  @override
  Widget build(BuildContext context) {
    // –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    if (_selectedDate == null) {
      return Scaffold(
        appBar: AppBar(title: const Text("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")),
        body: CalendarGrid(
          selectedDate: _currentMonth,
          onDateSelected: (date) {
            if (date.month != _currentMonth.month) {
              setState(() {
                _currentMonth = date;
              });
            } else {
              _onDateSelected(date);
            }
          },
          highlightedDate: _highlightedDate,
          onDateHighlighted: _onDateHighlighted,
          onMonthChanged: (date) {
            setState(() {
              _currentMonth = date;
            });
          },
        ),
      );
    }
    
    // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –¥–µ–Ω—å, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Ç–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    return Scaffold(
      appBar: AppBar(
        title: Text(
            "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ ${DateFormat('dd MMMM yyyy', 'ru').format(_selectedDate!)}"),
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: _goBackToCalendar,
        ),
        actions: [
          IconButton(
            onPressed: _addScheduleEntry,
            icon: const Icon(Icons.add),
            tooltip: '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å',
          ),
        ],
      ),
      body: _buildDayScheduleView(),
    );
  }

  Widget _buildDayScheduleView() {
    if (_scheduleEntries.isEmpty) {
      return Center(
                    child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
                      children: [
            Icon(
              Icons.schedule,
              size: 64,
              color: Theme.of(context).colorScheme.outline,
            ),
            const SizedBox(height: 16),
            Text(
              '–ù–∞ ${DateFormat('d MMMM yyyy', 'ru').format(_selectedDate!)} –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π',
              style: Theme.of(context).textTheme.headlineSmall?.copyWith(
                color: Theme.of(context).colorScheme.outline,
              ),
            ),
            const SizedBox(height: 32),
            ElevatedButton.icon(
                            onPressed: _addScheduleEntry,
                            icon: const Icon(Icons.add),
              label: const Text('–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å'),
            ),
          ],
        ),
      );
    }

    // –°–µ—Ç–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
    return Column(
      children: [
                        Expanded(
          child: _buildScheduleGrid(),
        ),
      ],
    );
  }

  Widget _buildScheduleGrid() {
    return LayoutBuilder(
      builder: (context, constraints) {
        return SingleChildScrollView(
          child: SizedBox(
            height: 24 * 60.0, // 24 —á–∞—Å–∞ –ø–æ 60 –ø–∏–∫—Å–µ–ª–µ–π –Ω–∞ —á–∞—Å
            child: Row(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                // –í—Ä–µ–º–µ–Ω–Ω–∞—è —à–∫–∞–ª–∞ (—á–∞—Å—ã)
                _buildTimeScale(),
                
                // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
                Container(
                  width: 1,
                  height: 24 * 60.0,
                  color: Theme.of(context).dividerColor,
                ),
                
                // –û–±–ª–∞—Å—Ç—å —Å–æ–±—ã—Ç–∏–π
                Expanded(
                  child: _buildEventsArea(constraints.maxWidth - 61), // –£—á–∏—Ç—ã–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã
                ),
              ],
            ),
          ),
        );
      },
    );
  }

  Widget _buildEventsArea(double availableWidth) {
    return SingleChildScrollView(
      scrollDirection: Axis.horizontal,
      child: SizedBox(
        width: math.max(availableWidth, 6 * 182.0), // –ú–∏–Ω–∏–º—É–º 6 —Å—Ç–æ–ª–±—Ü–æ–≤
        height: 24 * 60.0,
        child: Stack(
          children: [
            // –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è —Å–µ—Ç–∫–∞ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
            _buildGridLines(),
            
            // –°–æ–±—ã—Ç–∏—è
            ..._buildEventWidgets(),
          ],
        ),
      ),
    );
  }

  Widget _buildGridLines() {
    const double columnWidth = 180.0;
    const double leftPadding = 8.0;
    const double columnSpacing = 2.0;
    const int maxVisibleColumns = 6; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ—Ç–∫—É –¥–ª—è 6 —Å—Ç–æ–ª–±—Ü–æ–≤
    
    return SizedBox(
      width: 6 * 182.0, // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –¥–ª—è 6 —Å—Ç–æ–ª–±—Ü–æ–≤
      height: 24 * 60.0, // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞
      child: Stack(
                                      children: [
          // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ (—á–∞—Å—ã) - –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –≤–∏–¥–∏–º—ã–µ
          Column(
            children: List.generate(24, (hour) {
              return Container(
                height: 60,
                width: double.infinity,
                decoration: BoxDecoration(
                  border: Border(
                    bottom: BorderSide(
                      color: Theme.of(context).dividerColor.withOpacity(0.5),
                      width: 1.0,
                    ),
                  ),
                ),
              );
            }),
          ),
          
          // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ (—Å—Ç–æ–ª–±—Ü—ã) - –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –≤–∏–¥–∏–º—ã–µ
          Positioned(
            left: leftPadding, // –°–¥–≤–∏–≥–∞–µ–º –≤—Å–µ —Å—Ç–æ–ª–±—Ü—ã –Ω–∞ leftPadding –≤–ø—Ä–∞–≤–æ
            child: Row(
              mainAxisSize: MainAxisSize.min,
              children: List.generate(maxVisibleColumns, (columnIndex) {
                return Container(
                  width: columnIndex == 0 
                      ? columnWidth + columnSpacing // –ü–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü: —à–∏—Ä–∏–Ω–∞ –±–æ–∫—Å–∞ + –æ—Ç—Å—Ç—É–ø –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ
                      : columnWidth + columnSpacing, // –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã: —à–∏—Ä–∏–Ω–∞ –±–æ–∫—Å–∞ + –æ—Ç—Å—Ç—É–ø
                  height: 24 * 60.0,
                  decoration: BoxDecoration(
                    border: Border(
                      right: BorderSide(
                        color: Theme.of(context).dividerColor.withOpacity(0.4),
                        width: 1.0,
                      ),
                    ),
                  ),
                );
              }),
            ),
          ),
                                      ],
                                    ),
    );
  }

  Widget _buildTimeScale() {
    return SizedBox(
      width: 60,
      height: 24 * 60.0,
      child: Column(
        children: List.generate(24, (hour) {
          return Container(
            height: 60,
            width: 60,
            alignment: Alignment.topCenter,
            padding: const EdgeInsets.only(top: 4),
            child: Text(
              '${hour.toString().padLeft(2, '0')}:00',
              style: Theme.of(context).textTheme.bodySmall?.copyWith(
                color: Theme.of(context).colorScheme.outline,
                                  ),
                                ),
                              );
        }),
      ),
    );
  }

  List<Widget> _buildEventWidgets() {
    List<Widget> eventWidgets = [];
    
    // –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π —Å –∏—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º–∏
    List<EventWithTime> eventsWithTime = [];
    for (var entry in _scheduleEntries) {
      final timeRange = _parseTimeRange(entry.time);
      if (timeRange != null) {
        eventsWithTime.add(EventWithTime(
          entry: entry,
          startMinute: timeRange['startTotalMinutes'] as int,
          endMinute: timeRange['endTotalMinutes'] as int,
        ));
      }
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞
    eventsWithTime.sort((a, b) => a.startMinute.compareTo(b.startMinute));
    
    // –ê–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –≤ –∫–æ–ª–æ–Ω–∫–∞—Ö
    List<List<EventWithTime>> columns = [];
    
    for (var event in eventsWithTime) {
      bool placed = false;
      
      // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–æ–ª–æ–Ω–∫–µ
      for (var column in columns) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º –≤ –∫–æ–ª–æ–Ω–∫–µ
        bool canPlaceInColumn = true;
        for (var existingEvent in column) {
          if (!(event.endMinute <= existingEvent.startMinute || 
                event.startMinute >= existingEvent.endMinute)) {
            canPlaceInColumn = false;
            break;
          }
        }
        
        if (canPlaceInColumn) {
          column.add(event);
          placed = true;
          break;
        }
      }
      
      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–ª–æ–Ω–∫—É
      if (!placed) {
        columns.add([event]);
      }
    }
    
    // –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–±—ã—Ç–∏—è —Å –Ω–æ–≤–æ–π —à–∏—Ä–∏–Ω–æ–π
    for (int columnIndex = 0; columnIndex < columns.length; columnIndex++) {
      for (var event in columns[columnIndex]) {
        final widget = _buildSingleEventWidget(
          event.entry, 
          event.startMinute, 
          event.endMinute,
          columnIndex,
          columns.length,
        );
        if (widget != null) {
          eventWidgets.add(widget);
        }
      }
    }
    
    return eventWidgets;
  }

  Widget? _buildSingleEventWidget(
    ScheduleEntry entry, 
    int startMinute, 
    int endMinute,
    int columnIndex,
    int totalColumns,
  ) {
    final duration = endMinute - startMinute;
    if (duration <= 0) return null;
    
    final topPosition = startMinute.toDouble();
    final height = duration.toDouble();
    
    // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –∫–∞–∂–¥–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ –¥–ª—è –ø–ª–æ—Ç–Ω–æ–π –∫–æ–º–ø–æ–Ω–æ–≤–∫–∏
    const double columnWidth = 180.0; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –¥–æ 180px
    const double leftPadding = 8.0;
    const double columnSpacing = 2.0;
    
    final leftPosition = leftPadding + (columnIndex * (columnWidth + columnSpacing));
    
    return Positioned(
      left: leftPosition,
      top: topPosition,
      width: columnWidth, // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —à–∏—Ä–∏–Ω–∞ 180px
      height: height,
      child: _ScheduleEventCard(
        entry: entry,
        onTap: () => _editScheduleEntry(entry),
        onDelete: () => _deleteScheduleEntryByEntry(entry),
      ),
    );
  }

  Map<String, dynamic>? _parseTimeRange(String timeString) {
    // –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏ —Ç–∏–ø–∞ "09:00 - 10:30"
    final parts = timeString.split(' - ');
    if (parts.length != 2) return null;
    
    try {
      final startParts = parts[0].trim().split(':');
      final endParts = parts[1].trim().split(':');
      
      if (startParts.length != 2 || endParts.length != 2) return null;
      
      final startHour = int.parse(startParts[0]);
      final startMinute = int.parse(startParts[1]);
      final endHour = int.parse(endParts[0]);
      final endMinute = int.parse(endParts[1]);
      
      final startTotalMinutes = startHour * 60 + startMinute;
      final endTotalMinutes = endHour * 60 + endMinute;
      
      return {
        'startHour': startHour,
        'startMinute': startMinute,
        'endHour': endHour,
        'endMinute': endMinute,
        'startTotalMinutes': startTotalMinutes,
        'endTotalMinutes': endTotalMinutes,
      };
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏: $e');
      return null;
    }
  }

  void _editSchedule(int index) {
    ScheduleEntry entry = _scheduleEntries[index];
    TextEditingController timeController =
        TextEditingController(text: entry.time);
    TextEditingController shortNoteController =
        TextEditingController(text: entry.note ?? '');
    final timeMaskFormatter = MaskTextInputFormatter(
      mask: '##:## - ##:##',
      filter: {'#': RegExp(r'[0-9]')},
    );
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∑–Ω–∞—á–µ–Ω–∏—é
    timeMaskFormatter.formatEditUpdate(
      const TextEditingValue(text: ''),
      TextEditingValue(text: entry.time),
    );
    List<DynamicFieldEntry> dynamicFields = [];
    if (entry.dynamicFieldsJson != null &&
        entry.dynamicFieldsJson!.isNotEmpty) {
      Map<String, dynamic> decoded = jsonDecode(entry.dynamicFieldsJson!) as Map<String, dynamic>;
      decoded.forEach((key, value) {
        dynamicFields.add(DynamicFieldEntry(key: key, value: value.toString()));
      });
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–≥–∏
    List<String> tags = List<String>.from(entry.tags);
    
    String? timeError;
    
    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç–∏
    Recurrence recurrence = entry.recurrence;
    final TextEditingController intervalController = TextEditingController(text: '${recurrence.interval ?? 1}');
    final TextEditingController countController = TextEditingController(
      text: recurrence.count != null ? '${recurrence.count}' : ''
    );
    DateTime? selectedEndDate = recurrence.endDate;
    
    showDialog(
      context: context,
      builder: (BuildContext outerContext) {
        return StatefulBuilder(
          builder: (BuildContext innerContext,
              void Function(void Function()) setStateDialog) {
            return AlertDialog(
              title: const Text('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª'),
              content: SingleChildScrollView(
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    TextField(
                      controller: timeController,
                      inputFormatters: [timeMaskFormatter],
                      keyboardType: TextInputType.number,
                      decoration: InputDecoration(
                        labelText: '–í—Ä–µ–º—è (HH:MM - HH:MM)',
                        errorText: timeError,
                        helperText: '–î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 00:00 - 23:59',
                      ),
                    ),
                    const SizedBox(height: 10),
                    
                    // –°–µ–∫—Ü–∏—è –ø–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç–∏
                    const Divider(),
                    const Text(
                      '–ü–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç—å',
                      style: TextStyle(fontWeight: FontWeight.bold),
                    ),
                    
                    // –í—ã–±–æ—Ä —Ç–∏–ø–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
                    DropdownButtonFormField<RecurrenceType>(
                      value: recurrence.type,
                      decoration: const InputDecoration(
                        labelText: '–¢–∏–ø –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è',
                      ),
                      items: RecurrenceType.values.map((type) {
                        String label;
                        switch (type) {
                          case RecurrenceType.none:
                            label = '–ë–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è';
                            break;
                          case RecurrenceType.daily:
                            label = '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ';
                            break;
                          case RecurrenceType.weekly:
                            label = '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ';
                            break;
                          case RecurrenceType.monthly:
                            label = '–ï–∂–µ–º–µ—Å—è—á–Ω–æ';
                            break;
                          case RecurrenceType.yearly:
                            label = '–ï–∂–µ–≥–æ–¥–Ω–æ';
                            break;
                        }
                        return DropdownMenuItem<RecurrenceType>(
                          value: type,
                          child: Text(label),
                        );
                      }).toList(),
                      onChanged: (value) {
                        setStateDialog(() {
                          recurrence.type = value!;
                        });
                      },
                    ),
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–∏–ø –Ω–µ "–ë–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"
                    if (recurrence.type != RecurrenceType.none) ...[
                      const SizedBox(height: 10),
                      
                      // –ò–Ω—Ç–µ—Ä–≤–∞–ª
                      TextField(
                        controller: intervalController,
                        keyboardType: TextInputType.number,
                        decoration: InputDecoration(
                          labelText: '–ò–Ω—Ç–µ—Ä–≤–∞–ª',
                          helperText: _getIntervalHelperText(recurrence.type),
                        ),
                        onChanged: (value) {
                          int? interval = int.tryParse(value);
                          if (interval != null && interval > 0) {
                            recurrence.interval = interval;
                          }
                        },
                      ),
                      
                      const SizedBox(height: 10),
                      
                      // –¢–∏–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è (–ø–æ –¥–∞—Ç–µ –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É)
                      Row(
                        children: [
                          const Text('–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: '),
                          Radio<String>(
                            value: 'none',
                            groupValue: selectedEndDate != null 
                                ? 'date' 
                                : (recurrence.count != null ? 'count' : 'none'),
                            onChanged: (value) {
                              setStateDialog(() {
                                selectedEndDate = null;
                                recurrence.endDate = null;
                                recurrence.count = null;
                                countController.text = '';
                              });
                            },
                          ),
                          const Text('–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è'),
                          
                          Radio<String>(
                            value: 'date',
                            groupValue: selectedEndDate != null 
                                ? 'date' 
                                : (recurrence.count != null ? 'count' : 'none'),
                            onChanged: (value) {
                              setStateDialog(() {
                                selectedEndDate = DateTime.now().add(const Duration(days: 30));
                                recurrence.endDate = selectedEndDate;
                                recurrence.count = null;
                                countController.text = '';
                              });
                            },
                          ),
                          const Text('–ü–æ –¥–∞—Ç–µ'),
                          
                          Radio<String>(
                            value: 'count',
                            groupValue: selectedEndDate != null 
                                ? 'date' 
                                : (recurrence.count != null ? 'count' : 'none'),
                            onChanged: (value) {
                              setStateDialog(() {
                                selectedEndDate = null;
                                recurrence.endDate = null;
                                recurrence.count = 10;
                                countController.text = '10';
                              });
                            },
                          ),
                        ],
                      ),
                      
                      const SizedBox(height: 10),
                      
                      // –í–≤–æ–¥ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è
                      if (selectedEndDate != null)
                        Row(
                          children: [
                            const Text('–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: '),
                            TextButton(
                              onPressed: () async {
                                final DateTime? picked = await showDatePicker(
                                  context: innerContext,
                                  initialDate: selectedEndDate!,
                                  firstDate: DateTime.now(),
                                  lastDate: DateTime(2100),
                                  locale: const Locale('ru', 'RU'),
                                );
                                if (picked != null && picked != selectedEndDate) {
                                  setStateDialog(() {
                                    selectedEndDate = picked;
                                    recurrence.endDate = picked;
                                  });
                                }
                              },
                              child: Text(
                                DateFormat('dd.MM.yyyy').format(selectedEndDate!),
                              ),
                            ),
                          ],
                        ),
                      
                      // –í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
                      if (recurrence.count != null)
                        TextField(
                          controller: countController,
                          keyboardType: TextInputType.number,
                          decoration: const InputDecoration(
                            labelText: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π',
                          ),
                          onChanged: (value) {
                            int? count = int.tryParse(value);
                            if (count != null && count > 0) {
                              recurrence.count = count;
                            }
                          },
                        ),
                    ],
                    
                    const Divider(),
                    
                    Column(
                      children: dynamicFields.map((field) {
                        int fieldIndex = dynamicFields.indexOf(field);
                        return Row(
                          children: [
                            Expanded(
                              flex: 3,
                              child: TextField(
                                controller: field.keyController,
                                decoration:
                                    const InputDecoration(labelText: '–ü–æ–ª–µ'),
                              ),
                            ),
                            const SizedBox(width: 8),
                            Expanded(
                              flex: 4,
                              child: TextField(
                                controller: field.valueController,
                                decoration: const InputDecoration(
                                    labelText: '–ó–Ω–∞—á–µ–Ω–∏–µ'),
                              ),
                            ),
                            IconButton(
                              onPressed: () {
                                setStateDialog(() {
                                  dynamicFields.removeAt(fieldIndex);
                                });
                              },
                              icon: const Icon(Icons.delete),
                            ),
                          ],
                        );
                      }).toList(),
                    ),
                    Align(
                      alignment: Alignment.centerLeft,
                      child: TextButton(
                        onPressed: () {
                          setStateDialog(() {
                            dynamicFields.add(DynamicFieldEntry(
                                key: '–ù–æ–≤–æ–µ –ø–æ–ª–µ', value: ''));
                          });
                        },
                        child: const Text('–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ'),
                      ),
                    ),
                    const SizedBox(height: 10),
                    TextField(
                      controller: shortNoteController,
                      decoration:
                          const InputDecoration(labelText: '–ö—Ä–∞—Ç–∫–∞—è –∑–∞–º–µ—Ç–∫–∞'),
                      maxLines: null,
                      keyboardType: TextInputType.multiline,
                    ),
                    
                    const SizedBox(height: 16),
                    
                    // –í–∏–¥–∂–µ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–≥–∞–º–∏
                    const Text('–¢–µ–≥–∏:', style: TextStyle(fontWeight: FontWeight.bold)),
                    const SizedBox(height: 8),
                    TagInputWidget(
                      initialTags: tags,
                      onTagsChanged: (newTags) {
                        tags = newTags;
                      },
                      hintText: '–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥...',
                      maxTags: 10,
                    ),
                  ],
                ),
              ),
              actions: [
                TextButton(
                  onPressed: () {
                    // –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –º–∞—Å–∫–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é (—Ç.–µ. –º–µ–Ω—å—à–µ 8 —Ü–∏—Ñ—Ä)
                    if (timeMaskFormatter.getUnmaskedText().length < 8) {
                      setStateDialog(() {
                        timeError = '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Ä–µ–º—è –ø–æ–ª–Ω–æ—Å—Ç—å—é';
                      });
                      return;
                    }

                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–∏
                    String timeStr = timeController.text.trim();
                    List<String> timeParts = timeStr.split(' - ');
                    if (timeParts.length != 2) {
                      setStateDialog(() {
                        timeError = '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏';
                      });
                      return;
                    }

                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                    List<String> startTimeParts = timeParts[0].split(':');
                    if (startTimeParts.length != 2) {
                      setStateDialog(() {
                        timeError = '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞';
                      });
                      return;
                    }

                    int startHour = int.tryParse(startTimeParts[0]) ?? -1;
                    int startMinute = int.tryParse(startTimeParts[1]) ?? -1;
                    
                    if (startHour < 0 || startHour > 23 || startMinute < 0 || startMinute > 59) {
                      setStateDialog(() {
                        timeError = '–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 00:00 –¥–æ 23:59';
                      });
                      return;
                    }

                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–µ—á–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                    List<String> endTimeParts = timeParts[1].split(':');
                    if (endTimeParts.length != 2) {
                      setStateDialog(() {
                        timeError = '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è';
                      });
                      return;
                    }

                    int endHour = int.tryParse(endTimeParts[0]) ?? -1;
                    int endMinute = int.tryParse(endTimeParts[1]) ?? -1;
                    
                    if (endHour < 0 || endHour > 23 || endMinute < 0 || endMinute > 59) {
                      setStateDialog(() {
                        timeError = '–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 00:00 –¥–æ 23:59';
                      });
                      return;
                    }

                    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∏ –∫–æ–Ω–µ—á–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                    final startTimeMinutes = startHour * 60 + startMinute;
                    final endTimeMinutes = endHour * 60 + endMinute;
                    
                    if (startTimeMinutes >= endTimeMinutes) {
                      setStateDialog(() {
                        timeError = '–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è';
                      });
                      return;
                    }
                    
                    if (_checkTimeOverlap(timeController.text, excludeIndex: index)) {
                      _showTimeOverlapDialog().then((shouldContinue) {
                        if (shouldContinue != true) {
                          return;
                        }
                        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
                        Map<String, String> dynamicMap = {};
                        for (var field in dynamicFields) {
                          String key = field.keyController.text.trim();
                          if (key.isNotEmpty) {
                            dynamicMap[key] = field.valueController.text;
                          }
                        }
                        
                        // –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç–∏
                        if (recurrence.type != RecurrenceType.none) {
                          recurrence.interval = int.tryParse(intervalController.text) ?? 1;
                          if (selectedEndDate != null) {
                            recurrence.endDate = selectedEndDate;
                            recurrence.count = null;
                          } else if (countController.text.isNotEmpty) {
                            recurrence.count = int.tryParse(countController.text);
                            recurrence.endDate = null;
                          }
                        }
                        
                        entry.time = timeController.text;
                        entry.note = shortNoteController.text.trim();
                        entry.dynamicFieldsJson = jsonEncode(dynamicMap);
                        entry.recurrence = recurrence;
                        entry.tags = tags; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–≥–∏
                        
                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π databaseId –∏–ª–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                        if (entry.databaseId == null) {
                          try {
                            final collabProvider = Provider.of<EnhancedCollaborativeProvider>(context, listen: false);
                            if (collabProvider.isUsingSharedDatabase) {
                              entry.databaseId = collabProvider.currentDatabaseId;
                              print('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –±–∞–∑—ã: ${entry.databaseId}');
                            }
                          } catch (e) {
                            print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π –±–∞–∑–µ: $e');
                          }
                        } else {
                          print('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ –±–∞–∑–µ: ${entry.databaseId}');
                        }
                        
                        DatabaseHelper().updateScheduleEntry(entry).then((_) {
                          setState(() {
                            _scheduleEntries[index] = entry;
                          });
                          _loadSchedule();
                          showCustomToastWithIcon(
                            "–ò–Ω—Ç–µ—Ä–≤–∞–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω",
                            accentColor: Colors.yellow,
                            fontSize: 14.0,
                            icon: const Icon(Icons.edit,
                                size: 20, color: Colors.yellow),
                          );
                          Navigator.of(outerContext).pop();
                        });
                      });
                      return;
                    }

                    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –Ω–∞–ª–æ–∂–µ–Ω–∏—è
                    Map<String, String> dynamicMap = {};
                    for (var field in dynamicFields) {
                      String key = field.keyController.text.trim();
                      if (key.isNotEmpty) {
                        dynamicMap[key] = field.valueController.text;
                      }
                    }
                    
                    // –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç–∏
                    if (recurrence.type != RecurrenceType.none) {
                      recurrence.interval = int.tryParse(intervalController.text) ?? 1;
                      if (selectedEndDate != null) {
                        recurrence.endDate = selectedEndDate;
                        recurrence.count = null;
                      } else if (countController.text.isNotEmpty) {
                        recurrence.count = int.tryParse(countController.text);
                        recurrence.endDate = null;
                      }
                    } else {
                      recurrence.interval = 1;
                      recurrence.endDate = null;
                      recurrence.count = null;
                    }
                    
                    entry.time = timeController.text;
                    entry.note = shortNoteController.text.trim();
                    entry.dynamicFieldsJson = jsonEncode(dynamicMap);
                    entry.recurrence = recurrence;
                    entry.tags = tags; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–≥–∏
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π databaseId –∏–ª–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    if (entry.databaseId == null) {
                      try {
                        final collabProvider = Provider.of<EnhancedCollaborativeProvider>(context, listen: false);
                        if (collabProvider.isUsingSharedDatabase) {
                          entry.databaseId = collabProvider.currentDatabaseId;
                          print('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –±–∞–∑—ã: ${entry.databaseId}');
                        }
                      } catch (e) {
                        print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π –±–∞–∑–µ: $e');
                      }
                    } else {
                      print('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ –±–∞–∑–µ: ${entry.databaseId}');
                    }
                    
                    DatabaseHelper().updateScheduleEntry(entry).then((_) {
                      setState(() {
                        _scheduleEntries[index] = entry;
                      });
                      _loadSchedule();
                      showCustomToastWithIcon(
                        "–ò–Ω—Ç–µ—Ä–≤–∞–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω",
                        accentColor: Colors.yellow,
                        fontSize: 14.0,
                        icon: const Icon(Icons.edit,
                            size: 20, color: Colors.yellow),
                      );
                      Navigator.of(outerContext).pop();
                    });
                  },
                  child: const Text('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'),
                ),
                TextButton(
                  onPressed: () {
                    Navigator.of(outerContext).pop();
                    _deleteScheduleEntry(index);
                  },
                  style: TextButton.styleFrom(
                    foregroundColor: Colors.red,
                  ),
                  child: const Text('–£–¥–∞–ª–∏—Ç—å'),
                ),
                TextButton(
                  onPressed: () => Navigator.of(outerContext).pop(),
                  child: const Text('–û—Ç–º–µ–Ω–∞'),
                ),
              ],
            );
          },
        );
      },
    );
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
  void _deleteScheduleEntry(int index) {
    ScheduleEntry entry = _scheduleEntries[index];
    
    // –ï—Å–ª–∏ —É —Å–æ–±—ã—Ç–∏—è –µ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —É–¥–∞–ª–∏—Ç—å
    if (entry.recurrence.type != RecurrenceType.none) {
      showDialog(
        context: context,
        builder: (BuildContext dialogContext) {
          return AlertDialog(
            title: const Text('–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–≥–æ—Å—è —Å–æ–±—ã—Ç–∏—è'),
            content: const Text('–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å?'),
            actions: [
              TextButton(
                onPressed: () {
                  Navigator.of(dialogContext).pop();
                  // –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–æ–±—ã—Ç–∏—è
                  setState(() {
                    _scheduleEntries.removeAt(index);
                    _selectedIndex = null;
                  });
                  
                  showCustomToastWithIcon(
                    "–¢–µ–∫—É—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–æ–±—ã—Ç–∏—è —É–¥–∞–ª–µ–Ω",
                    accentColor: Colors.yellow,
                    fontSize: 14.0,
                    icon: const Icon(Icons.close, size: 20, color: Colors.yellow),
                  );
                },
                child: const Text('–¢–æ–ª—å–∫–æ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ'),
              ),
              TextButton(
                onPressed: () {
                  Navigator.of(dialogContext).pop();
                  // –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
                  DatabaseHelper().deleteScheduleEntry(entry.id!).then((_) {
                    setState(() {
                      _scheduleEntries.removeAt(index);
                      _selectedIndex = null;
                    });
                    
                    showCustomToastWithIcon(
                      "–í—Å–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è —É–¥–∞–ª–µ–Ω—ã",
                      accentColor: Colors.red,
                      fontSize: 14.0,
                      icon: const Icon(Icons.close, size: 20, color: Colors.red),
                    );
                  });
                },
                child: const Text('–í—Å–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è'),
              ),
              TextButton(
                onPressed: () {
                  Navigator.of(dialogContext).pop();
                },
                child: const Text('–û—Ç–º–µ–Ω–∞'),
              ),
            ],
          );
        },
      );
    } else {
      // –û–±—ã—á–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –¥–ª—è –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
      DatabaseHelper().deleteScheduleEntry(entry.id!).then((_) {
        setState(() {
          _scheduleEntries.removeAt(index);
          _selectedIndex = null;
        });
        
        showCustomToastWithIcon(
          "–ò–Ω—Ç–µ—Ä–≤–∞–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω",
          accentColor: Colors.red,
          fontSize: 14.0,
          icon: const Icon(Icons.close, size: 20, color: Colors.red),
        );
      });
    }
  }

  // –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
  void _showScheduleContextMenu(
      BuildContext context, int index, Offset position) async {
    final RenderBox? overlay =
        Overlay.of(context)?.context.findRenderObject() as RenderBox?;
    if (overlay == null) return;
    await showMenu(
      context: context,
      position: RelativeRect.fromRect(
          position & const Size(40, 40), Offset.zero & overlay.size),
      items: const [
        PopupMenuItem<String>(value: 'edit', child: Text('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å')),
        PopupMenuItem<String>(value: 'delete', child: Text('–£–¥–∞–ª–∏—Ç—å')),
      ],
    ).then((value) {
      if (value == 'edit') {
        _editSchedule(index);
      } else if (value == 'delete') {
        _deleteScheduleEntry(index);
      }
    });
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –∏–∫–æ–Ω–∫–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
  Color _getRecurrenceColor(RecurrenceType type) {
    switch (type) {
      case RecurrenceType.daily:
        return Colors.green;
      case RecurrenceType.weekly:
        return Colors.blue;
      case RecurrenceType.monthly:
        return Colors.orange;
      case RecurrenceType.yearly:
        return Colors.purple;
      default:
        return Colors.grey;
    }
  }
}

// –í–∏–¥–∂–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
class _ScheduleEventCard extends StatefulWidget {
  final ScheduleEntry entry;
  final VoidCallback onTap;
  final VoidCallback onDelete;

  const _ScheduleEventCard({
    Key? key,
    required this.entry,
    required this.onTap,
    required this.onDelete,
  }) : super(key: key);

  @override
  _ScheduleEventCardState createState() => _ScheduleEventCardState();
}

class _ScheduleEventCardState extends State<_ScheduleEventCard> {
  bool _isHovered = false;
  OverlayEntry? _overlayEntry;
  final GlobalKey _cardKey = GlobalKey();

  void _showTooltip() {
    if (widget.entry.note == null || widget.entry.note!.isEmpty) {
      // –î–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–∞–∂–µ –±–µ–∑ –∑–∞–º–µ—Ç–∫–∏
      final eventHeight = _calculateEventDuration();
      final isShortEvent = eventHeight < 80;
      if (!isShortEvent) return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∫–∞—Ä—Ç–æ—á–∫–∏
    final RenderBox? renderBox = _cardKey.currentContext?.findRenderObject() as RenderBox?;
    if (renderBox == null) return;
    
    final Offset position = renderBox.localToGlobal(Offset.zero);
    final Size size = renderBox.size;
    
    _overlayEntry = OverlayEntry(
      builder: (context) => Positioned(
        left: position.dx + size.width + 4, // –°–ø—Ä–∞–≤–∞ –æ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏
        top: position.dy, // –ù–∞ —É—Ä–æ–≤–Ω–µ –∫–∞—Ä—Ç–æ—á–∫–∏
        child: Material(
          elevation: 100, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π elevation
          borderRadius: BorderRadius.circular(8),
          color: Colors.transparent,
                  child: Container(
            width: 250,
            constraints: const BoxConstraints(maxHeight: 300),
            padding: const EdgeInsets.all(12),
                    decoration: BoxDecoration(
              color: Theme.of(context).colorScheme.surface,
              borderRadius: BorderRadius.circular(8),
              border: Border.all(
                color: Theme.of(context).colorScheme.outline.withOpacity(0.3),
                width: 1.5,
                    ),
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withOpacity(0.8),
                  blurRadius: 25,
                  offset: const Offset(0, 15),
                  spreadRadius: 8,
                        ),
              ],
            ),
            child: _buildTooltipContent(),
          ),
        ),
      ),
    );
    
    Overlay.of(context).insert(_overlayEntry!);
  }

  Widget _buildTooltipContent() {
    final eventHeight = _calculateEventDuration();
    final isShortEvent = eventHeight < 80;
    
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      mainAxisSize: MainAxisSize.min,
                                      children: [
        // –í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è
                                              Text(
          '–í—Ä–µ–º—è: ${widget.entry.time}',
          style: Theme.of(context).textTheme.bodySmall?.copyWith(
                                                  fontWeight: FontWeight.bold,
            color: Theme.of(context).colorScheme.primary,
          ),
        ),
        const SizedBox(height: 8),
        
        // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è (–¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π)
        if (isShortEvent && widget.entry.dynamicFieldsJson != null) ...[
          _buildTooltipDynamicFields(),
          const SizedBox(height: 8),
        ],
        
        // –¢–µ–≥–∏ (–¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π)
        if (isShortEvent && widget.entry.tags.isNotEmpty) ...[
          Text(
            '–¢–µ–≥–∏:',
            style: Theme.of(context).textTheme.bodySmall?.copyWith(
              fontWeight: FontWeight.bold,
              color: Theme.of(context).colorScheme.primary,
                                                    ),
                                                  ),
          const SizedBox(height: 4),
          Wrap(
            spacing: 4,
            runSpacing: 2,
            children: widget.entry.tags.map((tag) {
              return Container(
                padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                decoration: BoxDecoration(
                  color: Theme.of(context).colorScheme.primary.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(12),
                  border: Border.all(
                    color: Theme.of(context).colorScheme.primary.withOpacity(0.3),
                    width: 0.5,
                  ),
                ),
                                          child: Text(
                  tag,
                  style: Theme.of(context).textTheme.bodySmall?.copyWith(
                    color: Theme.of(context).colorScheme.primary,
                    fontSize: 10,
                  ),
                ),
              );
            }).toList(),
          ),
          const SizedBox(height: 8),
        ],
        
        // –ó–∞–º–µ—Ç–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if (widget.entry.note != null && widget.entry.note!.isNotEmpty) ...[
          Text(
            '–ó–∞–º–µ—Ç–∫–∞:',
            style: Theme.of(context).textTheme.bodySmall?.copyWith(
              fontWeight: FontWeight.bold,
              color: Theme.of(context).colorScheme.primary,
                                        ),
          ),
          const SizedBox(height: 4),
          Flexible(
            child: SingleChildScrollView(
              child: Text(
                widget.entry.note!,
                style: Theme.of(context).textTheme.bodySmall?.copyWith(
                  color: Theme.of(context).colorScheme.onSurface,
                                  ),
                                ),
                          ),
                        ),
                      ],
      ],
    );
  }

  Widget _buildTooltipDynamicFields() {
    try {
      final fieldsMap = jsonDecode(widget.entry.dynamicFieldsJson!) as Map<String, dynamic>;
      return Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            '–î–µ—Ç–∞–ª–∏:',
            style: Theme.of(context).textTheme.bodySmall?.copyWith(
              fontWeight: FontWeight.bold,
              color: Theme.of(context).colorScheme.primary,
            ),
          ),
          const SizedBox(height: 4),
          ...fieldsMap.entries.where((entry) => entry.value.toString().isNotEmpty).map((entry) {
            return Padding(
              padding: const EdgeInsets.only(bottom: 2),
              child: Text(
                '${entry.key}: ${entry.value}',
                style: Theme.of(context).textTheme.bodySmall?.copyWith(
                  color: Theme.of(context).colorScheme.onSurface,
                ),
              ),
            );
          }).toList(),
        ],
      );
    } catch (e) {
      return const SizedBox.shrink();
    }
  }

  @override
  void dispose() {
    _hideTooltip();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    // –í—ã—á–∏—Å–ª—è–µ–º –≤—ã—Å–æ—Ç—É —Å–æ–±—ã—Ç–∏—è –≤ –ø–∏–∫—Å–µ–ª—è—Ö –∏–∑ –ø–æ–ª—è time
    final eventHeight = _calculateEventDuration();
    final isShortEvent = eventHeight < 80; // –°–æ–±—ã—Ç–∏–µ –∫–æ—Ä–æ—á–µ 80 –ø–∏–∫—Å–µ–ª–µ–π —Å—á–∏—Ç–∞–µ—Ç—Å—è –∫–æ—Ä–æ—Ç–∫–∏–º
    
    return MouseRegion(
      onEnter: (_) {
        if (mounted) {
          setState(() => _isHovered = true);
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π –∏–ª–∏ –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–º–µ—Ç–∫–∞
          if (isShortEvent || (widget.entry.note != null && widget.entry.note!.isNotEmpty)) {
            _showTooltip();
          }
        }
      },
      onExit: (_) {
        if (mounted) {
          setState(() => _isHovered = false);
          _hideTooltip();
        }
      },
      child: GestureDetector(
        onSecondaryTap: widget.onTap, // –ò–∑–º–µ–Ω–µ–Ω–æ: –ø—Ä–∞–≤–∞—è –∫–Ω–æ–ø–∫–∞ –º—ã—à–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        child: Container(
          key: _cardKey,
          width: 180, // –°—Ç—Ä–æ–≥–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —à–∏—Ä–∏–Ω–∞
          height: double.infinity, // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –†–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –Ω–∞ –≤—Å—é –¥–æ—Å—Ç—É–ø–Ω—É—é –≤—ã—Å–æ—Ç—É
          margin: const EdgeInsets.only(right: 2, bottom: 2),
                    decoration: BoxDecoration(
            color: const Color(0xFF22a6b3), // –¶–≤–µ—Ç cyan #22a6b3
            borderRadius: BorderRadius.circular(8),
            border: Border.all(
              color: const Color(0xFF22a6b3).withOpacity(0.7),
              width: 1,
            ),
            boxShadow: [
              BoxShadow(
                color: Colors.black.withOpacity(0.1),
                blurRadius: 4,
                offset: const Offset(0, 2),
                          ),
            ],
                        ),
                            padding: const EdgeInsets.all(8),
          child: isShortEvent ? _buildShortEventContent() : _buildFullEventContent(),
        ),
      ),
    );
  }

  // –í—ã—á–∏—Å–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è –≤ –º–∏–Ω—É—Ç–∞—Ö –∏–∑ –ø–æ–ª—è time
  double _calculateEventDuration() {
    try {
      final timeParts = widget.entry.time.split(' - ');
      if (timeParts.length != 2) return 60.0; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 60 –º–∏–Ω—É—Ç
      
      final startParts = timeParts[0].split(':');
      final endParts = timeParts[1].split(':');
      
      if (startParts.length != 2 || endParts.length != 2) return 60.0;
      
      final startMinutes = int.parse(startParts[0]) * 60 + int.parse(startParts[1]);
      final endMinutes = int.parse(endParts[0]) * 60 + int.parse(endParts[1]);
      
      return (endMinutes - startMinutes).toDouble();
    } catch (e) {
      return 60.0; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 60 –º–∏–Ω—É—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
    }
  }

  // –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π (—Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è)
  Widget _buildShortEventContent() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      mainAxisSize: MainAxisSize.max,
      children: [
        // –¢–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π
        Flexible(
                                    child: Text(
            widget.entry.time,
            style: const TextStyle(
              color: Colors.white,
              fontWeight: FontWeight.bold,
              fontSize: 12,
            ),
            maxLines: 2,
            overflow: TextOverflow.ellipsis,
          ),
        ),
        const Spacer(),
      ],
    );
  }

  // –ü–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
  Widget _buildFullEventContent() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      mainAxisSize: MainAxisSize.max,
      children: [
        // –í—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (–ª–µ–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª)
        Text(
          widget.entry.time,
          style: const TextStyle(
            color: Colors.white,
            fontWeight: FontWeight.bold,
            fontSize: 12,
          ),
        ),
        const SizedBox(height: 4),
        
        // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è
        if (widget.entry.dynamicFieldsJson != null) ...[
          Flexible(child: _buildDynamicFields()),
          const SizedBox(height: 4),
        ],
        
        // –¢–µ–≥–∏
        if (widget.entry.tags.isNotEmpty) ...[
          Flexible(child: _buildTags()),
        ],
        
        // –ó–∞–ø–æ–ª–Ω–∏—Ç–µ–ª—å –¥–ª—è —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏—è –Ω–∞ –≤—Å—é –≤—ã—Å–æ—Ç—É
        const Spacer(),
      ],
    );
  }

  Widget _buildDynamicFields() {
    try {
      final fieldsMap = jsonDecode(widget.entry.dynamicFieldsJson!) as Map<String, dynamic>;
      return Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: fieldsMap.entries.where((entry) => entry.value.toString().isNotEmpty).map((entry) {
          return Padding(
            padding: const EdgeInsets.only(bottom: 2),
            child: Text(
              '${entry.key}: ${entry.value}',
              style: const TextStyle(
                color: Colors.white,
                fontSize: 11,
                                    ),
              maxLines: 1,
              overflow: TextOverflow.ellipsis,
                                  ),
          );
        }).toList(),
      );
    } catch (e) {
      return const SizedBox.shrink();
    }
  }

  Widget _buildTags() {
    return Wrap(
      spacing: 4,
      runSpacing: 2,
      children: widget.entry.tags.take(3).map((tag) {
        return Container(
          padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
          decoration: BoxDecoration(
            color: Colors.white.withOpacity(0.2),
            borderRadius: BorderRadius.circular(12),
            border: Border.all(
              color: Colors.white.withOpacity(0.3),
              width: 0.5,
            ),
          ),
          child: Text(
            tag,
            style: const TextStyle(
              color: Colors.white,
              fontSize: 9,
            ),
      ),
    );
      }).toList(),
    );
  }

  void _hideTooltip() {
    _overlayEntry?.remove();
    _overlayEntry = null;
  }
} 