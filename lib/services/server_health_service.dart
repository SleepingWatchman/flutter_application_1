import 'dart:async';
import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:provider/provider.dart';
import 'package:flutter_application_1/providers/auth_provider.dart';

enum ServerStatus {
  online,
  offline,
  unknown,
}

class ServerHealthService {
  static final ServerHealthService _instance = ServerHealthService._internal();
  factory ServerHealthService() => _instance;
  ServerHealthService._internal();

  Timer? _healthCheckTimer;
  ServerStatus _currentStatus = ServerStatus.unknown;
  bool _isInitialized = false;
  String? _baseUrl;
  String? _token;
  
  // –ö–æ–ª–±–µ–∫–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
  final List<Function(ServerStatus)> _statusListeners = [];

  ServerStatus get currentStatus => _currentStatus;
  bool get isOnline => _currentStatus == ServerStatus.online;
  bool get isOffline => _currentStatus == ServerStatus.offline;

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞
  void initialize(BuildContext context) {
    if (_isInitialized) return;
    
    print('üè• HEALTH: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞');
    
    final authProvider = Provider.of<AuthProvider>(context, listen: false);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π URL –∏–∑ —Å–µ—Ä–≤–∏—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
    _baseUrl = 'http://localhost:8080'; // –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º
    _token = authProvider.token;
    _isInitialized = true;
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
    _performHealthCheck(context);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    _startPeriodicHealthChecks(context);
    
    print('üè• HEALTH: –°–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –∑–∞–ø—É—â–µ–Ω');
  }

  /// –î–æ–±–∞–≤–∏—Ç—å —Å–ª—É—à–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
  void addStatusListener(Function(ServerStatus) listener) {
    _statusListeners.add(listener);
  }

  /// –£–¥–∞–ª–∏—Ç—å —Å–ª—É—à–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
  void removeStatusListener(Function(ServerStatus) listener) {
    _statusListeners.remove(listener);
  }

  /// –£–≤–µ–¥–æ–º–∏—Ç—å –≤—Å–µ—Ö —Å–ª—É—à–∞—Ç–µ–ª–µ–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
  void _notifyStatusListeners(ServerStatus status) {
    for (final listener in _statusListeners) {
      try {
        listener(status);
      } catch (e) {
        print('üè• HEALTH: –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ —Å–ª—É—à–∞—Ç–µ–ª—è: $e');
      }
    }
  }

  /// –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
  void _startPeriodicHealthChecks(BuildContext context) {
    _healthCheckTimer?.cancel();
    
    _healthCheckTimer = Timer.periodic(
      const Duration(minutes: 5), 
      (_) => _performHealthCheck(context)
    );
    
    print('üè• HEALTH: –ó–∞–ø—É—â–µ–Ω—ã –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç');
  }

  /// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
  Future<void> _performHealthCheck(BuildContext context) async {
    if (_baseUrl == null) {
      print('üè• HEALTH: –ë–∞–∑–æ–≤—ã–π URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É');
      return;
    }

    try {
      print('üè• HEALTH: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞...');
      
      // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ API
      final response = await http.get(
        Uri.parse('$_baseUrl/api/collaboration/databases'),
        headers: {
          'Content-Type': 'application/json',
          if (_token != null) 'Authorization': 'Bearer $_token',
        },
      ).timeout(const Duration(seconds: 10));

      final newStatus = (response.statusCode == 200 || response.statusCode == 401) 
          ? ServerStatus.online 
          : ServerStatus.offline;
      
      _updateServerStatus(newStatus);
      
    } catch (e) {
      print('üè• HEALTH: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞: $e');
      _updateServerStatus(ServerStatus.offline);
    }
  }

  /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
  Future<void> forceHealthCheck(BuildContext context) async {
    print('üè• HEALTH: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞');
    await _performHealthCheck(context);
  }

  /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞ (–±–µ–∑ toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)
  void _updateServerStatus(ServerStatus newStatus) {
    final previousStatus = _currentStatus;
    _currentStatus = newStatus;
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–µ–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ (–æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤ AppBar)
    _notifyStatusListeners(newStatus);
    
    print('üè• HEALTH: –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω: ${_getStatusText(newStatus)}');
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
  String _getStatusText(ServerStatus status) {
    switch (status) {
      case ServerStatus.online:
        return '–û–Ω–ª–∞–π–Ω';
      case ServerStatus.offline:
        return '–û—Ñ–ª–∞–π–Ω';
      case ServerStatus.unknown:
        return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
  IconData getStatusIcon(ServerStatus status) {
    switch (status) {
      case ServerStatus.online:
        return Icons.cloud_done;
      case ServerStatus.offline:
        return Icons.cloud_off;
      case ServerStatus.unknown:
        return Icons.cloud_queue;
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
  Color getStatusColor(ServerStatus status) {
    switch (status) {
      case ServerStatus.online:
        return Colors.green;
      case ServerStatus.offline:
        return Colors.red;
      case ServerStatus.unknown:
        return Colors.orange;
    }
  }

  /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  void updateToken(String? newToken) {
    _token = newToken;
    print('üè• HEALTH: –¢–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω');
  }

  /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ URL —Å–µ—Ä–≤–µ—Ä–∞
  void updateBaseUrl(String? newBaseUrl) {
    _baseUrl = newBaseUrl;
    print('üè• HEALTH: –ë–∞–∑–æ–≤—ã–π URL –æ–±–Ω–æ–≤–ª–µ–Ω: $newBaseUrl');
  }

  /// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞
  void dispose() {
    print('üè• HEALTH: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞');
    _healthCheckTimer?.cancel();
    _healthCheckTimer = null;
    _statusListeners.clear();
    _isInitialized = false;
  }

  /// –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
  void restart(BuildContext context) {
    print('üè• HEALTH: –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞');
    dispose();
    initialize(context);
  }
} 