# PowerShell —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
# –ó–∞–ø—É—Å–∫: .\run_tests_detailed.ps1

param(
    [switch]$SkipCoverage,
    [string]$TestPath = "",
    [switch]$Verbose
)

Write-Host "üß™ –ó–∞–ø—É—Å–∫ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ—Å—Ç–æ–≤ Flutter" -ForegroundColor Cyan
Write-Host "=" * 60 -ForegroundColor Gray

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –º—ã –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
if (!(Test-Path "pubspec.yaml")) {
    Write-Host "‚ùå –û—à–∏–±–∫–∞: pubspec.yaml –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞." -ForegroundColor Red
    exit 1
}

# –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
Write-Host "üßπ –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ—Ç—á–µ—Ç–æ–≤..." -ForegroundColor Yellow
if (Test-Path "coverage") {
    Remove-Item -Recurse -Force "coverage"
}
if (Test-Path "test_results.json") {
    Remove-Item -Force "test_results.json"
}

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
$testCommand = "flutter test"
if ($TestPath) {
    $testCommand += " $TestPath"
}
if (!$SkipCoverage) {
    $testCommand += " --coverage"
}
$testCommand += " --reporter=json --machine"

Write-Host "üöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤..." -ForegroundColor Green
Write-Host "–ö–æ–º–∞–Ω–¥–∞: $testCommand" -ForegroundColor Gray

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å JSON –≤—ã–≤–æ–¥–æ–º
$testOutput = ""
$testExitCode = 0

try {
    $testOutput = Invoke-Expression $testCommand 2>&1
    $testExitCode = $LASTEXITCODE
} catch {
    Write-Host "‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤: $_" -ForegroundColor Red
    exit 1
}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
$testOutput | Out-File -FilePath "test_results.json" -Encoding UTF8

Write-Host "`nüìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è..." -ForegroundColor Cyan

# –ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
$passedTests = @()
$failedTests = @()
$skippedTests = @()
$totalTests = 0

# –ü–∞—Ä—Å–∏–Ω–≥ JSON –≤—ã–≤–æ–¥–∞
$testOutput -split "`n" | ForEach-Object {
    $line = $_.Trim()
    if ($line -match '^\{.*\}$') {
        try {
            $testResult = $line | ConvertFrom-Json
            
            if ($testResult.type -eq "testStart") {
                $totalTests++
            }
            elseif ($testResult.type -eq "testDone") {
                $testName = $testResult.test.name
                $groupName = $testResult.test.groupIDs -join " > "
                if ($groupName) { 
                    $fullTestName = "$groupName > $testName" 
                } else { 
                    $fullTestName = $testName 
                }
                
                if ($testResult.result -eq "success") {
                    $passedTests += @{
                        Name = $fullTestName
                        Time = $testResult.time
                    }
                }
                elseif ($testResult.result -eq "failure" -or $testResult.result -eq "error") {
                    $failedTests += @{
                        Name = $fullTestName
                        Error = $testResult.error
                        StackTrace = $testResult.stackTrace
                    }
                }
                elseif ($testResult.result -eq "skip") {
                    $skippedTests += @{
                        Name = $fullTestName
                        Reason = $testResult.skipReason
                    }
                }
            }
        }
        catch {
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JSON
        }
    }
}

# –í—ã–≤–æ–¥ —Å–≤–æ–¥–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
Write-Host "`n" + "=" * 60 -ForegroundColor Gray
Write-Host "üìà –°–í–û–î–ù–´–ô –û–¢–ß–ï–¢ –ü–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Æ" -ForegroundColor Cyan -BackgroundColor DarkBlue
Write-Host "=" * 60 -ForegroundColor Gray

$passedCount = $passedTests.Count
$failedCount = $failedTests.Count
$skippedCount = $skippedTests.Count
$totalCount = $passedCount + $failedCount + $skippedCount

Write-Host "`nüìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:" -ForegroundColor White
Write-Host "   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: $totalCount" -ForegroundColor Gray
Write-Host "   ‚úÖ –ü—Ä–æ—à–ª–∏: $passedCount" -ForegroundColor Green
Write-Host "   ‚ùå –ù–µ –ø—Ä–æ—à–ª–∏: $failedCount" -ForegroundColor Red
Write-Host "   ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: $skippedCount" -ForegroundColor Yellow

if ($totalCount -gt 0) {
    $successRate = [math]::Round(($passedCount / $totalCount) * 100, 2)
    Write-Host "   üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: $successRate%" -ForegroundColor $(if ($successRate -ge 80) { "Green" } elseif ($successRate -ge 60) { "Yellow" } else { "Red" })
}

# –î–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—à–µ–¥—à–∏—Ö —Ç–µ—Å—Ç–æ–≤
if ($passedTests.Count -gt 0) {
    Write-Host "`n‚úÖ –ü–†–û–®–ï–î–®–ò–ï –¢–ï–°–¢–´ ($($passedTests.Count)):" -ForegroundColor Green
    $passedTests | Sort-Object Name | ForEach-Object {
        if ($_.Time) { 
            $timeMs = " ($($_.Time)ms)" 
        } else { 
            $timeMs = "" 
        }
        Write-Host "   ‚úì $($_.Name)$timeMs" -ForegroundColor DarkGreen
    }
}

# –î–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
if ($failedTests.Count -gt 0) {
    Write-Host "`n‚ùå –ù–ï–£–î–ê–ß–ù–´–ï –¢–ï–°–¢–´ ($($failedTests.Count)):" -ForegroundColor Red
    $failedTests | ForEach-Object {
        Write-Host "   ‚úó $($_.Name)" -ForegroundColor DarkRed
        if ($_.Error) {
            Write-Host "     –û—à–∏–±–∫–∞: $($_.Error)" -ForegroundColor Red
        }
        if ($Verbose -and $_.StackTrace) {
            Write-Host "     Stack trace: $($_.StackTrace)" -ForegroundColor DarkRed
        }
    }
}

# –°–ø–∏—Å–æ–∫ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
if ($skippedTests.Count -gt 0) {
    Write-Host "`n‚è≠Ô∏è –ü–†–û–ü–£–©–ï–ù–ù–´–ï –¢–ï–°–¢–´ ($($skippedTests.Count)):" -ForegroundColor Yellow
    $skippedTests | ForEach-Object {
        Write-Host "   ‚è≠ $($_.Name)" -ForegroundColor DarkYellow
        if ($_.Reason) {
            Write-Host "     –ü—Ä–∏—á–∏–Ω–∞: $($_.Reason)" -ForegroundColor Yellow
        }
    }
}

# –ê–Ω–∞–ª–∏–∑ –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–¥–∞
if (!$SkipCoverage -and (Test-Path "coverage/lcov.info")) {
    Write-Host "`nüìä –ê–ù–ê–õ–ò–ó –ü–û–ö–†–´–¢–ò–Ø –ö–û–î–ê:" -ForegroundColor Cyan
    
    try {
        $lcovContent = Get-Content "coverage/lcov.info" -Raw
        
        # –ü–∞—Ä—Å–∏–Ω–≥ LCOV –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        $sourceFiles = @()
        $lcovContent -split "end_of_record" | ForEach-Object {
            $record = $_.Trim()
            if ($record -match "SF:(.+)" -and $record -match "LF:(\d+)" -and $record -match "LH:(\d+)") {
                $file = $matches[1] -replace ".*[\\/]lib[\\/]", "lib/"
                $totalLines = [int]$matches[2]
                $hitLines = [int]$matches[3]
                $coverage = if ($totalLines -gt 0) { [math]::Round(($hitLines / $totalLines) * 100, 1) } else { 0 }
                
                $sourceFiles += @{
                    File = $file
                    Total = $totalLines
                    Hit = $hitLines
                    Coverage = $coverage
                }
            }
        }
        
        if ($sourceFiles.Count -gt 0) {
            $totalAllLines = ($sourceFiles | Measure-Object -Property Total -Sum).Sum
            $totalHitLines = ($sourceFiles | Measure-Object -Property Hit -Sum).Sum
            $overallCoverage = if ($totalAllLines -gt 0) { [math]::Round(($totalHitLines / $totalAllLines) * 100, 2) } else { 0 }
            
            Write-Host "   üìà –û–±—â–µ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ: $overallCoverage%" -ForegroundColor $(if ($overallCoverage -ge 80) { "Green" } elseif ($overallCoverage -ge 60) { "Yellow" } else { "Red" })
            Write-Host "   üìù –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: $totalAllLines" -ForegroundColor Gray
            Write-Host "   ‚úÖ –ü–æ–∫—Ä—ã—Ç–æ —Å—Ç—Ä–æ–∫: $totalHitLines" -ForegroundColor Gray
            
            # –¢–æ–ø —Ñ–∞–π–ª–æ–≤ —Å –Ω–∏–∑–∫–∏–º –ø–æ–∫—Ä—ã—Ç–∏–µ–º
            $lowCoverageFiles = $sourceFiles | Where-Object { $_.Coverage -lt 70 -and $_.Total -gt 5 } | Sort-Object Coverage | Select-Object -First 5
            if ($lowCoverageFiles.Count -gt 0) {
                Write-Host "`n‚ö†Ô∏è –§–∞–π–ª—ã —Å –Ω–∏–∑–∫–∏–º –ø–æ–∫—Ä—ã—Ç–∏–µ–º:" -ForegroundColor Yellow
                $lowCoverageFiles | ForEach-Object {
                    Write-Host "   $($_.Coverage)% - $($_.File) ($($_.Hit)/$($_.Total))" -ForegroundColor Red
                }
            }
            
            # –¢–æ–ø —Ñ–∞–π–ª–æ–≤ —Å –≤—ã—Å–æ–∫–∏–º –ø–æ–∫—Ä—ã—Ç–∏–µ–º
            $highCoverageFiles = $sourceFiles | Where-Object { $_.Coverage -ge 90 } | Sort-Object Coverage -Descending | Select-Object -First 5
            if ($highCoverageFiles.Count -gt 0) {
                Write-Host "`nüèÜ –§–∞–π–ª—ã —Å –æ—Ç–ª–∏—á–Ω—ã–º –ø–æ–∫—Ä—ã—Ç–∏–µ–º:" -ForegroundColor Green
                $highCoverageFiles | ForEach-Object {
                    Write-Host "   $($_.Coverage)% - $($_.File) ($($_.Hit)/$($_.Total))" -ForegroundColor DarkGreen
                }
            }
        }
    }
    catch {
        Write-Host "   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∫—Ä—ã—Ç–∏–µ: $_" -ForegroundColor Yellow
    }
}

# –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
Write-Host "`n" + "=" * 60 -ForegroundColor Gray
if ($failedCount -eq 0) {
    Write-Host "üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!" -ForegroundColor Green -BackgroundColor DarkGreen
} elseif ($failedCount -le 3) {
    Write-Host "‚ö†Ô∏è –ï–°–¢–¨ –ù–ï–°–ö–û–õ–¨–ö–û –ù–ï–£–î–ê–ß–ù–´–• –¢–ï–°–¢–û–í" -ForegroundColor Yellow -BackgroundColor DarkYellow
} else {
    Write-Host "‚ùå –ú–ù–û–ì–û –ù–ï–£–î–ê–ß–ù–´–• –¢–ï–°–¢–û–í - –¢–†–ï–ë–£–ï–¢ –í–ù–ò–ú–ê–ù–ò–Ø" -ForegroundColor Red -BackgroundColor DarkRed
}

Write-Host "`nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:" -ForegroundColor Cyan
if ($failedCount -gt 0) {
    Write-Host "   ‚Ä¢ –ò—Å–ø—Ä–∞–≤—å—Ç–µ –Ω–µ—É–¥–∞—á–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏" -ForegroundColor Yellow
}
if (!$SkipCoverage -and $overallCoverage -lt 70) {
    Write-Host "   ‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø–æ–∫—Ä—ã—Ç–∏—è" -ForegroundColor Yellow
}
if ($passedCount -gt 0 -and $failedCount -eq 0) {
    Write-Host "   ‚Ä¢ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤" -ForegroundColor Green
}

Write-Host "`nüìÅ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã:" -ForegroundColor Gray
Write-Host "   ‚Ä¢ test_results.json - –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ" -ForegroundColor Gray
if (!$SkipCoverage -and (Test-Path "coverage/lcov.info")) {
    Write-Host "   ‚Ä¢ coverage/lcov.info - –¥–∞–Ω–Ω—ã–µ –ø–æ–∫—Ä—ã—Ç–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ HTML –æ—Ç—á–µ—Ç–∞" -ForegroundColor Gray
}

Write-Host "`n‚ú® –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!" -ForegroundColor Cyan

# –í–æ–∑–≤—Ä–∞—Ç –∫–æ–¥–∞ –≤—ã—Ö–æ–¥–∞
exit $testExitCode 