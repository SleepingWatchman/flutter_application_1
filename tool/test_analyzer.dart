import 'dart:io';
import 'dart:convert';
import 'dart:math';

/// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–¥–∞
class TestAnalyzer {
  static const String resetColor = '\x1B[0m';
  static const String redColor = '\x1B[31m';
  static const String greenColor = '\x1B[32m';
  static const String yellowColor = '\x1B[33m';
  static const String blueColor = '\x1B[34m';
  static const String cyanColor = '\x1B[36m';
  static const String whiteColor = '\x1B[37m';
  static const String boldColor = '\x1B[1m';

  /// –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞
  static Future<void> analyze() async {
    print('${cyanColor}${boldColor}üîç –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Flutter$resetColor\n');

    try {
      // –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤
      await _analyzeTestResults();
      
      // –ê–Ω–∞–ª–∏–∑ –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–¥–∞
      await _analyzeCoverage();
      
      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
      _generateRecommendations();
      
    } catch (e) {
      print('${redColor}‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: $e$resetColor');
      exit(1);
    }
  }

  /// –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤ –∏–∑ JSON —Ñ–∞–π–ª–∞
  static Future<void> _analyzeTestResults() async {
    final testResultsFile = File('test_results.json');
    if (!testResultsFile.existsSync()) {
      print('${yellowColor}‚ö†Ô∏è –§–∞–π–ª test_results.json –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã —Å–Ω–∞—á–∞–ª–∞.$resetColor');
      return;
    }

    print('${boldColor}üìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤:$resetColor');

    final content = await testResultsFile.readAsString();
    final lines = content.split('\n').where((line) => line.trim().isNotEmpty);

    final List<TestResult> tests = [];
    final Map<String, int> suiteStats = {};

    for (final line in lines) {
      try {
        final data = jsonDecode(line);
        if (data['type'] == 'testDone') {
          final testResult = TestResult.fromJson(data);
          tests.add(testResult);
          
          // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ test suite
          final suite = testResult.suiteName ?? 'Unknown';
          suiteStats[suite] = (suiteStats[suite] ?? 0) + 1;
        }
      } catch (e) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ JSON —Å—Ç—Ä–æ–∫–∏
      }
    }

    if (tests.isEmpty) {
      print('${yellowColor}‚ö†Ô∏è –¢–µ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ñ–∞–π–ª–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤$resetColor');
      return;
    }

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
    final passed = tests.where((t) => t.result == 'success').length;
    final failed = tests.where((t) => t.result == 'failure' || t.result == 'error').length;
    final skipped = tests.where((t) => t.result == 'skip').length;
    final total = tests.length;

    final successRate = total > 0 ? (passed / total * 100).toDouble() : 0.0;

    print('  ${whiteColor}–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: $total$resetColor');
    print('  ${greenColor}‚úÖ –ü—Ä–æ—à–ª–∏: $passed$resetColor');
    print('  ${redColor}‚ùå –ù–µ –ø—Ä–æ—à–ª–∏: $failed$resetColor');
    print('  ${yellowColor}‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: $skipped$resetColor');
    print('  ${_getColorForPercentage(successRate)}üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${successRate.toStringAsFixed(1)}%$resetColor');

    if (failed > 0) {
      print('\n${redColor}${boldColor}‚ùå –ù–µ—É–¥–∞—á–Ω—ã–µ —Ç–µ—Å—Ç—ã:$resetColor');
      tests.where((t) => t.result == 'failure' || t.result == 'error').forEach((test) {
        print('  ${redColor}‚úó ${test.name}$resetColor');
        if (test.error?.isNotEmpty == true) {
          print('    ${redColor}–û—à–∏–±–∫–∞: ${test.error}$resetColor');
        }
      });
    }

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ test suites
    if (suiteStats.isNotEmpty) {
      print('\n${boldColor}üìÅ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ñ–∞–π–ª–∞–º —Ç–µ—Å—Ç–æ–≤:$resetColor');
      suiteStats.entries.forEach((entry) {
        print('  ${cyanColor}${entry.key}: ${entry.value} —Ç–µ—Å—Ç–æ–≤$resetColor');
      });
    }

    // –°–∞–º—ã–µ –º–µ–¥–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    final slowTests = tests
        .where((t) => t.time != null && t.time! > 100)
        .toList()
      ..sort((a, b) => (b.time ?? 0).compareTo(a.time ?? 0));

    if (slowTests.isNotEmpty) {
      print('\n${yellowColor}${boldColor}üêå –ú–µ–¥–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã (>100ms):$resetColor');
      slowTests.take(5).forEach((test) {
        print('  ${yellowColor}‚è±Ô∏è ${test.name}: ${test.time}ms$resetColor');
      });
    }
  }

  /// –ê–Ω–∞–ª–∏–∑ –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–¥–∞
  static Future<void> _analyzeCoverage() async {
    final coverageFile = File('coverage/lcov.info');
    if (!coverageFile.existsSync()) {
      print('\n${yellowColor}‚ö†Ô∏è –§–∞–π–ª –ø–æ–∫—Ä—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã —Å --coverage$resetColor');
      return;
    }

    print('\n${boldColor}üìä –ê–Ω–∞–ª–∏–∑ –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–¥–∞:$resetColor');

    final content = await coverageFile.readAsString();
    final records = content.split('end_of_record');
    
    final List<FileCoverage> files = [];
    
    for (final record in records) {
      if (record.trim().isEmpty) continue;
      
      final lines = record.split('\n');
      String? sourceFile;
      int? linesFound;
      int? linesHit;
      
      for (final line in lines) {
        if (line.startsWith('SF:')) {
          sourceFile = line.substring(3);
        } else if (line.startsWith('LF:')) {
          linesFound = int.tryParse(line.substring(3));
        } else if (line.startsWith('LH:')) {
          linesHit = int.tryParse(line.substring(3));
        }
      }
      
      if (sourceFile != null && linesFound != null && linesHit != null) {
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ lib/ —Ñ–∞–π–ª—ã
        if (sourceFile.contains('/lib/')) {
          final relativePath = sourceFile.split('/lib/').last;
          final coverage = linesFound > 0 ? (linesHit / linesFound * 100).toDouble() : 0.0;
          
          files.add(FileCoverage(
            path: 'lib/$relativePath',
            linesTotal: linesFound,
            linesHit: linesHit,
            coverage: coverage,
          ));
        }
      }
    }

    if (files.isEmpty) {
      print('  ${yellowColor}‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –ø–æ–∫—Ä—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã$resetColor');
      return;
    }

    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    final totalLines = files.fold<int>(0, (sum, file) => sum + file.linesTotal);
    final totalHit = files.fold<int>(0, (sum, file) => sum + file.linesHit);
    final overallCoverage = totalLines > 0 ? (totalHit / totalLines * 100).toDouble() : 0.0;

    print('  ${_getColorForPercentage(overallCoverage)}ÔøΩÔøΩ –û–±—â–µ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ: ${overallCoverage.toStringAsFixed(2)}%$resetColor');
    print('  ${whiteColor}üìù –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: $totalLines$resetColor');
    print('  ${greenColor}‚úÖ –ü–æ–∫—Ä—ã—Ç–æ —Å—Ç—Ä–æ–∫: $totalHit$resetColor');

    // –§–∞–π–ª—ã —Å –Ω–∏–∑–∫–∏–º –ø–æ–∫—Ä—ã—Ç–∏–µ–º
    final lowCoverageFiles = files
        .where((f) => f.coverage < 70 && f.linesTotal > 5)
        .toList()
      ..sort((a, b) => a.coverage.compareTo(b.coverage));

    if (lowCoverageFiles.isNotEmpty) {
      print('\n${redColor}${boldColor}‚ö†Ô∏è –§–∞–π–ª—ã —Å –Ω–∏–∑–∫–∏–º –ø–æ–∫—Ä—ã—Ç–∏–µ–º (<70%):$resetColor');
      lowCoverageFiles.take(10).forEach((file) {
        print('  ${redColor}${file.coverage.toStringAsFixed(1)}% - ${file.path} (${file.linesHit}/${file.linesTotal})$resetColor');
      });
    }

    // –§–∞–π–ª—ã —Å –æ—Ç–ª–∏—á–Ω—ã–º –ø–æ–∫—Ä—ã—Ç–∏–µ–º
    final highCoverageFiles = files
        .where((f) => f.coverage >= 90)
        .toList()
      ..sort((a, b) => b.coverage.compareTo(a.coverage));

    if (highCoverageFiles.isNotEmpty) {
      print('\n${greenColor}${boldColor}üèÜ –§–∞–π–ª—ã —Å –æ—Ç–ª–∏—á–Ω—ã–º –ø–æ–∫—Ä—ã—Ç–∏–µ–º (‚â•90%):$resetColor');
      highCoverageFiles.take(5).forEach((file) {
        print('  ${greenColor}${file.coverage.toStringAsFixed(1)}% - ${file.path} (${file.linesHit}/${file.linesTotal})$resetColor');
      });
    }

    // –ê–Ω–∞–ª–∏–∑ –ø–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º
    final directoryStats = <String, DirectoryStats>{};
    for (final file in files) {
      final parts = file.path.split('/');
      if (parts.length > 1) {
        final dir = parts.take(2).join('/'); // lib/providers, lib/models, etc.
        if (!directoryStats.containsKey(dir)) {
          directoryStats[dir] = DirectoryStats(directory: dir);
        }
        directoryStats[dir]!.addFile(file);
      }
    }

    if (directoryStats.isNotEmpty) {
      print('\n${boldColor}üìÅ –ü–æ–∫—Ä—ã—Ç–∏–µ –ø–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º:$resetColor');
      directoryStats.entries
          .map((e) => e.value)
          .toList()
        ..sort((a, b) => a.coverage.compareTo(b.coverage))
        ..forEach((stat) {
          print('  ${_getColorForPercentage(stat.coverage)}${stat.coverage.toStringAsFixed(1)}% - ${stat.directory} (${stat.filesCount} —Ñ–∞–π–ª–æ–≤)$resetColor');
        });
    }
  }

  /// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
  static void _generateRecommendations() {
    print('\n${cyanColor}${boldColor}üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:$resetColor');
    print('  ${greenColor}‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞ –≤—ã—à–µ 80%$resetColor');
    print('  ${greenColor}‚Ä¢ –ò—Å–ø—Ä–∞–≤–ª—è–π—Ç–µ –Ω–µ—É–¥–∞—á–Ω—ã–µ —Ç–µ—Å—Ç—ã –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å$resetColor');
    print('  ${greenColor}‚Ä¢ –î–æ–±–∞–≤–ª—è–π—Ç–µ —Ç–µ—Å—Ç—ã –¥–ª—è –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π$resetColor');
    print('  ${greenColor}‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –º–µ–¥–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã$resetColor');
    print('  ${greenColor}‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞$resetColor');
  }

  static String _getColorForPercentage(double percentage) {
    if (percentage >= 80) return greenColor;
    if (percentage >= 60) return yellowColor;
    return redColor;
  }
}

/// –ú–æ–¥–µ–ª—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞
class TestResult {
  final String name;
  final String result;
  final int? time;
  final String? error;
  final String? suiteName;

  TestResult({
    required this.name,
    required this.result,
    this.time,
    this.error,
    this.suiteName,
  });

  factory TestResult.fromJson(Map<String, dynamic> json) {
    return TestResult(
      name: json['test']?['name'] ?? 'Unknown Test',
      result: json['result'] ?? 'unknown',
      time: json['time'],
      error: json['error'],
      suiteName: json['test']?['suite']?['platform'],
    );
  }
}

/// –ú–æ–¥–µ–ª—å –ø–æ–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞
class FileCoverage {
  final String path;
  final int linesTotal;
  final int linesHit;
  final double coverage;

  FileCoverage({
    required this.path,
    required this.linesTotal,
    required this.linesHit,
    required this.coverage,
  });
}

/// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫—Ä—ã—Ç–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
class DirectoryStats {
  final String directory;
  int _totalLines = 0;
  int _hitLines = 0;
  int _filesCount = 0;

  DirectoryStats({required this.directory});

  void addFile(FileCoverage file) {
    _totalLines += file.linesTotal;
    _hitLines += file.linesHit;
    _filesCount++;
  }

  double get coverage => _totalLines > 0 ? (_hitLines / _totalLines * 100) : 0;
  int get filesCount => _filesCount;
}

/// –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
void main() async {
  await TestAnalyzer.analyze();
} 